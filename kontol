# Obfuscated by Py Compile
# Created by HTR-TECH (https://github.com/htr-tech)
# Instagram : @tahmid.rayat

import base64
exec(base64.b64decode('# Obfuscated by Py Compile
# Created by HTR-TECH (https://github.com/htr-tech)
# Instagram : @tahmid.rayat

import base64
exec(base64.b64decode('IyBPYmZ1c2NhdGVkIGJ5IFB5IENvbXBpbGUKIyBDcmVhdGVkIGJ5IEhUUi1URUNIIChodHRwczovL2dpdGh1Yi5jb20vaHRyLXRlY2gpCiMgSW5zdGFncmFtIDogQHRhaG1pZC5yYXlhdAoKaW1wb3J0IGJhc2U2NApleGVjKGJhc2U2NC5iNjRkZWNvZGUoJ0l5QlBZbVoxYzJOaGRHVmtJR0o1SUZCNUlFTnZiWEJwYkdVS0l5QkRjbVZoZEdWa0lHSjVJRWhVVWkxVVJVTklJQ2hvZEhSd2N6b3ZMMmRwZEdoMVlpNWpiMjB2YUhSeUxYUmxZMmdwQ2lNZ1NXNXpkR0ZuY21GdElEb2dRSFJoYUcxcFpDNXlZWGxoZEFvS2FXMXdiM0owSUdKaGMyVTJOQXBsZUdWaktHSmhjMlUyTkM1aU5qUmtaV052WkdVb0owbDVRbEJaYlZveFl6Sk9hR1JIVm10SlIwbzFTVVpDTlVsRlRuWmlXRUp3WWtkVlMwbDVRa1JqYlZab1pFZFdhMGxIU2pWSlJXaFZWV2t4VlZKVlRrbEpRMmh2WkVoU2QyTjZiM1pNTW1Sd1pFZG9NVmxwTldwaU1qQjJZVWhTZVV4WVVteFpNbWR3UTJsTloxTlhOWHBrUjBadVkyMUdkRWxFYjJkUlNGSm9ZVWN4Y0ZwRE5YbFpXR3hvWkVGdlMyRlhNWGRpTTBvd1NVZEthR015VlRKT1FYQnNaVWRXYWt0SFNtaGpNbFV5VGtNMWFVNXFVbXRhVjA1MldrZFZiMG93YkRWUmJGSnFVakJhTUZSR1drOWtSMDQxVVc1a1lWZEZiM2RYVm1ONFlVVnNTRkp1UW1saVYwNXVXWHBLTkUxWFRtNWpTRUpwVjBWS01sa3lOVkphTWtsNlZGaE9hazB5ZURaVVJXUjNaVzFKZVU1SVRtdFNNbmd3VjJ4R2QwMUhUblZoZWxwRVdqSjRkMWxzYUVOa2JVNTFWVmRrYW1KV1dqUmFSbVJYWlcxU1NWUlhaRnBYUlRGdVdUSXhWMkpIUmpOaU1IQnFZbFphTkZWR2FFdGlSbkJZWXpOV1ZrMXNXalpaZWtwelpHMUtjRm96UWtSaVZsa3dWMVJLVjJReVVrUlJhelZwVFd4SmVGbHJaRmRVTWtsNlZXdGthVTB4V2pGWGExWlhaVmRPZEU5WWJGQmlWR3cyVkVjMVQwNVhUWHBWYlhocFZUSmtjRmt3YUhOTlIwWklUMWhXU2xGNlJqQlRWV2hEWTBkT1JGRnVRbWxpYXpSM1YxWmtOR013YkVsVGJYaHFWMFphYzFsNlRsTmxhMnh3WVRKa1VHVlZTakpaTTJzeFpXMVdXVlJxUW1GV2VrSjJWMjFzUzJReVZsbFZiVGxwVFdwU2JscFVUazlPVjA0MVRsZG9hbUpYVVhsV00zQkRXa2RhVkZOWVFrUmlWM2gwVTFWak1XUnRVa1JSYmxwcVpWUldNMWRXYUZOaU1IaDBZa2h3WVdKWGVIcFhiRTV1WW10M2VWVnRhR3RTTUZZeVYydGtSMDFHYkZSUFYzQnBUV3BDTVZwRlpGZGxWMHBaVm1wU1RVMXNjSGRaYTJSWFpXdDNlbFp1Y0dwaFZHeHdXVlpqTUdSdFRrbGlSekZvVmpKU2VsZHNhRkppYTNSVllqQjBTbEV3Um01VFZXTTFaV3Q0ZFZScVZtcE5NVXB6V1d4T2JtSnRUa2xpUkVKb1VucHNNVk5WVFhoa1JXeEpVVzVDYWxFd1NuZFpiVFZQVFVac1dHVklUa3BUUlVreFYyMHhjMkp0U2toV2FrSkxaVmQwYmxRemJFTmtiVTQxVGxod2JGZEZOSGRYYkdOM1lqRndjRk51Wkd4WFJrcDJXV3BKTUZveVZYcFVhbFpxWlZSV2Ixa3lNV3ROYkdRMlVXMVNiVlV3YkhkUk1qRlRZa1p3Y0ZGdVJscFdNMmh2V1cxc2IyRkhSa1JoZWxwRVlWVkdibE5WVGtOaVYwbDZVMWRrYUZVd1NuZFpiV3hEWVVkR1JGRllTa3BSTUhCcVdXMXNTazVyVG5CUlYyUktVVEJHYmxOVlRrSmFNazE2WWtod1RXSnJOSGRYYTJNMVRWZFNSRTVVVG1waVYzZDNWMnhPYjJORmRGSmlNbVJLVVRCR2JsTlZUa0phTUd4SlZHcFdhbVZVVmpaYVJXUlRaRzFTV1ZWWVZtRmlXR2Q0V1hwS2JtSXdkRkppTW1SS1VUQkdibE5WVGtKYU1HeEpWVzVDYVZZeFZqRlpla28wWWtad1dWRlhPVTVSZWxJelZGaHNjbE14Y0VoV2JURktVMFUwZUZkWE5VdGlSMFkxV2pOQ1VGb3lPVzVUVlU1Q1dqSkplbFJZVm1wTk1uZzJXa1ZrVjJSRmRFUmFSM0JwVWpGYWIxa3liR3BqUlU1d1VWZGtTbEV3U1hkWk1qVnlUbXRPY0ZGWFpFcFJNRVp1VTFWT1Fsb3hhM2xXYmtwS1VrUkNibGxxVGtOaVIwcHdXakkxYWsweFduQlpNakZYWTJ0d05XUXlOV3BoVjA1M1ZFYzFTMkpHYkZoVlZ6bE1WVmM1YmxOVlRrSmFNR3hFVVZka1NsSjZiRFpVUnpWUFRsZE5lbFZ0ZUdsVk1tUjFWMVJLTkdKR2JGbFRWelZNVlZjNWJsTlZUa0phTVhCWllVZHdZVmRGU1hkVFZWWnpWVVpLV1ZOdWJHbE5NR3N5VVRKc1Fsb3diRVJSVjJSS1VUQkdibGw2U2tkTmJIQlVVVlJzU2xKNmJETlhiR013WWpCdmVsUnFSbHBpYTNCeldWaHNhbU13YjNwWk1qVk1WVmM1YmxOVlRrSmFNR3hFVVZka1NsTkZOVzlhUnpGV1pGZFJlbE51UW10U01WWjJVMnBHVTJSdFNYbGxTSEJLVTBVMU0xZFdZM2RhTWsxNVRWaHdTbE5GU25OWk1qVlRZVWRLV0ZKWFpHcFRSbG94V2xaa1Jsb3hiRmhpU0ZaaFpWVktObGxyYUZkbFZYQTFZVEIwU2xFd1JtNVRWVTVDV2pCc1JGRnVjRnBYUm5CelZFY3hUMk15U1hwVWJYaE1VVEowVEZOVlRrSmFNR3hFVVZka1NsRXdTbmhYVm1RMFlVZEtjRm95TlZsU1JVWTJWRlJHZW1WRk9UWmhNM0JwV2xWMGJHSXpiRU5aTURGRlZGaHdXR1ZyVlROVU1WSnJaRVpWZWxadGJHcGlWbHA1VTFWYWMyUnRVbGRWYWtaYVlsWldibFZXWkhOa1ZuQTFVV3RXYTFZelozaFRWVnBQWXpKU1dWTlhOVXhWVnpsdVUxVk9RbG93YkVSUlYyUktVbnBzTmxSSE5VOU9WMDE2VlcxNGFWVXlaSFZhUldSWFpWZEtXVlpxVWsxV2Vtd3pWMnhqTUZveVJrbFZha0pxVTBVd01sUklhelZOTWxGNldUTldiRlo2YTNoYVJXaFhZVlp3VkU1WGNHbE5ha0l5VjFSS2IyRkhTblJPVjNocFVYcHNWMVZVU1RWaVZrcHpXa2RzVlZaNlZrdFhiVFZPVFVaR1ZrOVZVbWhTUmtvelZWUktiMVV4UmxoWk1qVk1WVmM1YmxOVlRrSmFNR3hFVVZka1NsTkdTbmRaYkdSV1pGZE5lV1ZIZUdGWFJVWjJWR3RPY2xNd2JFUlJWMlJLVVRCR2JsTlZUa05rYlU0MVRsaHdiRmRGTkhkWGJHTjNZakJ2ZVZSdVRtRldNRm8xVTI1c2NsTXdUblZSVjJSUlZUQkdjRk5YYkVwVE1XaEZVVmh3VGsxWVRqUlVNM0J5VFRKS2JGTXhXbk5VTUhSWFlUQTVURlp0ZEZCVE1WcHpUVmhrTTFSWWNFOVphekZWWTNwV1RsWjZUbkJpUld4RllWZDRTbEpIYkhOVFZWSndZa1ZzUldGWGVFcFJiVTVPVWtVeE5sWXpjRVpPTURsVldraFJNR05HWkZaT1NFSllWMFpvUlZGWWNFNU5XRTQwVkROd2NtVkhTbXhUTVZadVZEQjBWbG93T1V4V1YyUkhaRE5rVG1Wck5XbFVWbEo2VGxVMGVVMHliSE5YYkZKd1lrWndhMWt3TVVWVVdIQllaV3RWTTFReFVrZGtSRkozVlRCR1dWSkZSalpVVkVaNlpVVTVObUV6WkdsYVZYUlhZa1U1VEZadGRGQlRNVnB5VkRCMFYyRXdPVXhXYlhnelkwZE9UbEpGTVRaV00zQkdUakE1VlZwSVVUQmpSbVJUVGtoQ1dGWlVVbmRXTVdjd1kwWmtVMWRGVWtKbGF6QjRZek5vVUdWdGREUlpiVlpNVmxka1VGTXhWbTVVTUhSV1dqQTVURlpYWkVka00yUk9aV3MxYVZSV1VucE9WVFI1VFRKc2MxZHNVbkJpUm05NllWZDRZV050YkhOWGJWSnFWRlZTVG1Wc1pEWlNWR1JRVmtWYU1FNUlRbFJSVkZKM1ZUQkdXVkpGUmpaVVZFWjZaVVU1Tm1GNlRtbGFWWFJYWVRKV1RGWnRkRmRrTTJST1pXczFhVlJXVW5wT1ZURllUVEpzYzFOVlNtcFVWVkpPWld4a05sSlVaRkJXUlVvd1RraENXRlZxVW5kV01WVXdZMFprVWs1SVFsaFhSRkozVmpGS1JHSklaRE5VV0hCUFdXc3hWV042Vms5TmFrNXdZa1p3U1dGWGVHRmpiV3h6VjJwT2NHSkdjSGxoVjNob1dXMXNjMWRyVW5CaVIwWnBZVmQ0WVZwdGJITlpWVkp3WWtad2JXRlhlR0ZXUjJ4eldWaHdjR0pHY0VWaFYzaGhVa2RzYzFsV1FuQmlSbkJIV1RBeFJWUlljRmhsYTFVelZERlNSMlJFVW5kVk1FWlpVa1ZHTmxSVVJucGxSVGsyWVROa2FWcFZkRmRoTWxaTVZtMHhNVk14V25KVU1IUlhZVEE1VEZadVFqRlRNVnB5VkRCMFYyRXdPVXhXYmtJeFV6RmFjbFF3ZEZkaE1EbE1WbTVDTVZNeFduTkxNSFJYWWtVNVRGWnVRakZUTVZwelN6QjBWMkpGT1V4V2JrSXhVekZhY2xRd2RGZGhNRGxNVm01Q01WTXhXbkpVTUhSWFlraGtkMWt3TVVWVVdIQllaV3RWTTFReFVtdGtSRkozVmpGSk1HTkdaRlpPU0VKWVZWUlNkMVl4WnpCalJtUlRUa2hDV0ZaVVVuZFdNbTh3WTBaa1UwNUlRbGhWYWxKM1ZqRkpNR05HWkZOT1NFSllWV3BTZDFZeFZUQmpSbVJaVGtoQ1dGVnFVbmRXTVVwWlVrVkdObFJVUm5wbFJUazJZVE5vYVZwVmRGWmFNRm96WkRBeE5sUnRTazVXU0UweFZGVmplbUZYZUdGamJXeHpWMnRTY0dKR2NFVmhWM2hoV20xc2MxZHJhSEJpUm5CVllWZDRZVnB0YkhOWGEyaHdZa1p3VldGWGVHRmFiV3h6VjJ0b2NHSkdjSGxoVjNoaFRUSnNjMWRyYUhCaVJuQjVZVmQ0WVUweWJITlhhMmh3WWtad1NXRlhlR0ZTUjJ4eldWWkNjR0pHY0ZWaFYzaGhUVVYwV1ZKRlJqWlVWRVo2WlVVNU5tRjZUbWxhVlhSWFlUSldURlp0TVRGVE1WcHlWREIwVjJKdFZreFdiWFJzVXpGYWNscFZkRmRoTWxaTVZtMHhNVk14V25WYVZYUlhZVEpXVEZadE1URlRNVnAyU3pCMFYySkZPVXhXYlhkeVV6RmFjbHBWZEZkaVdGWk1WbTEzZUdRelpFNWxhelZwVkZaU2VrNVZNVWhOTW14elYydG9jR0pHY0hsaFYzaGhVa2RzYzFkcVRuQmlSbkJKWVZkNFlXTnRiSE5YYWs1d1lrWndTV0ZYZUdGV1IyeHpWMjFhY0dKR2NFbGhWM2hoVTBkc2MxZHJhSEJpUm5CSllWZDRZVk5IYkhOWGEyaHdZa1p3U1dGWGVHRlRSMnh6VjJ0U2NHSkhSbEZoVjNoaFVsVjBXVkpGUmpaVVZFWjZaVVU1Tm1GNlRtbGFWWFJYWWxoV1RGWnRkRkJUTVZweVZEQjBWMkV3T1V4V2JrWnNVekZhZFZwVmRGZGlXRlpNVm0xMFVGTXhXbkpVTUhSWFkxZFdURlp0ZEZCVE1WcDRXbFYwVjJKdFZreFdiVEV4VXpGYWVGcFZkRmRoTURsTVZtMDFWMlF6WkU1bGF6VnBWRlpTZWs1Vk1VaE5NbXh6VjI1S2NHSkdjRVZoVjNoaFVrZHNjMWRyVW5CaVIwWlJZVmQ0WVZaSGJITlhhMUp3WWtkR2RXRlhlR0ZOTW14elYyNUtjR0pIUm5WaFYzaG9ZbTFzYzFsWE5YQmlSMFoxWVZkNGFHSnRiSE5aVnpWd1lrZEdkV0ZYZUdGU1IyeHpWMnRTY0dKSFJuVmhWM2hoVFVWMFdWSkZSalpVVkVaNlpVVTVObUV6YUdsVk1FcEZXVEl4VjJGSFVraFBXR3hLVW01a00xUlljRTlaYXpGVlkzcFdUbEo2UVRKVFZWb3paREF4TmxSdFNrNVdTRTB4VkZSSmVGSnNWbkpQVms1UFZrVkZkMU5WVGtKYU1XaEZVVmh3VGsxWVRqUlVNM0J5WkRKS2JGTXhXbkphVlhSWFlURk9RMWRHUmxSUmJVNU9Va1V4TmxZemNFWk9NRGxWVW01U1VHRlZTbXBVVlZKT1pXeGtObEpVWkZCV1JUVXdVek53V21WVk9VVlNXR3hPVmtWR05GUnRjRUpsYXpWVldqQjBXVkpGUmpaVVZFWjZaVVU1Tm1FelpHbFZNRVp1VTFWT1Fsb3diRVJSVjJSS1VUQkdibE5WVGtKYU1HeEVVVmRrU2xFd1JtNVRWVGxNVm0weE1WTXhXblZWTUd4d1UxZGtkbE14Y0VoV2JURktVak5vTWxkcVNUUmlNSFJWWWpCMFNsRXdSbTVUVldNMVpXdDRkVlJxVm1wTk1VcHpXV3hPYm1Kc2EzbGxSM2hhVjBWc2RWTXhSblphTUd4RVVWZGthR0pWV25wWFZtTXdZakpPUkdFd2RGcE5ibWh2V1hwT1Rsb3lTblZpUjNocVVqQmFNRlF5WkhaVGJIQklWbTB4U2xKcWJHMVpWbU14WTBkU1IwOVhXa3hUUlRWeldXdGtXbU14YURaYU0wNVpaV3RGTUZSRldUUk5hekZ3WVhwYVJGb3lkRXRaZWtwWFl6RndjRTVYV2xCUk0yZzJWMnhrTkdKVmVITlBTR1JRVVROb05sZHNaRFJpVlhoelQwUktUbUZxUm0xVU1FNDBXbXN4UlZvelRsbGxiR3cxVVRKa2MyRXhjRmhYVjJScFYwWmFlbGRXWkhKaU1rMTVWbTVPWVdGWGN6SlJNbVJ5VTIxU1NWTnFWbEJhTWpsTFVURkdjMkpYU1hwVFYyUnNVVEJLZDFsdGJFTmxWbXhZVGxjMVlWVXlZM2hUTVZKMlV6Qk9VbUV3Y0VSWFJUVnpXVzB4VWs5WFRuUldibWhOWW10S01sbDZUbEppTUd4MFlVUkNhMU5GU2paVU1tczBaR3hyZVUxWWNGcFhSVXAzVkVjd2VHRkhUa2hVYms1clZqQnNNVmRVU1RWa1JYZDVVbTVrYUZWNmJEWlpWbVJyWkZkU1dWRllVbWxOTVVvelUxZHNOR0V4YkZsVmJXaFJWMGhPY0Zrd1pHOWtiVXAwVmxkc1VHSnJOWE5aYTJSYVpGWm9ObEZVVW0xVk0yaDJWMnhrUjJFeGNGbFRibkJSVjBoT2NGVlVTVFZrVjBwMFZtMXdhMUl5ZURKWmJXeEtUbXRzUkZOdVNtRldNVm96VkVaa1IyTXlSbGxYYlhoS1lWaGtjRlpzYUU5aVIwNXdUVlZLWVUxc1dqRmFSVTVLVG10c1JGTnJOV2xOTTBKM1dXdGtOR0ZGZURaV1dGWk9VVEJHZGxaRlpITmtWMUpaV25wa1NsSlZXakZYYTJoTFpHMUdXRlZYWkU5VmVsSTBWRWR3Ums0d2JFZFVhelZOVmxkTmVWUlZVa05XUld4R1UycEdhRll6YUhKVVJFSTBWR3hrVlZWVVRsZGhiazV1V2tST1dtTkZiRVpTYm1ScVVqTm9jMVpxU2xkaFZrMTVZa1JDVFdWc1ZqWlVibXN3WldzMWNGRlhPVlJOUjJoV1ZrWldNMk13YkVobFNFSm9UV3hXYmxWcVNsZGhiVVY1VDBoQ1NsSnNjSE5aTWpWUFkwZEplVTVJV2s5UmVsSXpVMVZXVDJJeVRuUlBXRkpoVlhwbmVGUXhUVEJrTUhoeFZGaGtUMlZyVmpGVVZsSktUVlZzUmsxWVdscGlWM2g2VjJ4T1ExWkdiRmhYYldocVlsZDBNbFJzVWs1Tk1IaHhWRlJLU21KcVFuZFVSelZUWWtkV1NWVlZkRVJWVjNSTFVURmtjMkpWYkVSVGJscG9aVlZzYmxsV1l6QmFNazE1Vm01V1lWSklRbkZaYWtreFRVZEdXRTVVUm1GVlZ6bExVVEZHY2xOc2NGaGxTSEJoVmtoQ2NGa3lNVmRoUjBZellqQndSRlZYZUhSWmFrNUtXakpXUkZGdVFtbGhWVW8xVjFaak1XSnNjRlJhZWtaTVZrYzVURkV4Um5KVGEwNVpWRzE0YVdKV1JUVlpNakZYWlVWNGRWRnVXbXBOTVVaMlUxY3hiMDFIVWtsUmJuQlFZVlJvTWxkV2FFTmpSWGgwVW0xMFdsWXpVbTlaYkdSeVpGZEdXRlZZV2xwV01VcHZWWHBPUzJKR2NFaGlSRUpOVFRCS2MxbDZTa2RrVlhkNVpFaGFZVkl4V2xoWGJHaExZMFp3ZEdKSVNscFhSVFYzVTFkc05HRXhiRmxWYldoUlZqTkNObGxxU1RCa1ZuQkpWbTVTYWxORk1YWmFXR3hMWTJ4d1dWVnVRbWhsVldzeVZGVk9NMkZYU25SUFdGSnBUVEJzY0ZReWJFcGtNR3h3WkVod1lWWXphSFJVUjNjMFRrZGFWR0V6VG1oU01WcHZWMnRrVjJWWFRqWk5WR1JLWWxVMU1sbHROVk5pUjBwMVZWaFNhMU5IZUROWGJFNUtUbXRzUkZOdGFHcFRSVXA2V1Zaa1QyRkhVa2hpU0ZwcFlWUnNlRmw2U1RWa1ZUazFVVzF3YUZJd1dqVlpla3BYVFVaQ1YxWnNWbE5oVkVFd1UxZHNNMkZXYTNsUFdGWnJVakZhTVZwRlRYaGpNWEJZVGxjMWExSXlaSEJVTW14Q1lWVXhObFZYYkUxUk1IQnZWMVJLVDJKSFRrbFZXRkpoVm5wV2NWbHFTbE5qUjBwMFdUSnNVR0ZWUm5CWGFrNTNZMGRPUkZOWVRrcGliRm8yVjJ4b1NtUkdiRmhhUjNocFlteEdjRlF5YkVKaFYwbDVaRWM1YTFOR1NqTlVTSEJPWkZVNVJFNUlaRXBoV0dSd1YxWmtUMkZzY0ZsUmFrSk5Wak5vYjFsdE1XdE5WbXhZV2tkNFNtRnRPVzVUVnpGelpGVnNjR1F5Ykd4UmVrWnZWMnRrUm1SSFVraFBXRXBoVm5wU2NGUXliRUpoVld4d1pESnNiRkY2Um05WGEyUkdaRVpzV1ZGdVpHaFdNVVp3VkRKc1FtRlZPVVZSV0dST1VrVkZlVk5YYkROaFYxWkVUVmRvWVZJd1ZqQlphazVPWVZVNWNGRlhiRnBXZWxaeVdUSXdOV05HY0VSVFdFNUtZbTFrTUZkV1pGTmhSWGhZVkcwNVdsWjZWakZYYkdRellWVTVjRkZYYkdGU01WcDBWMVpvVjJNeVVrUlRXRTVLWW0xa01GZFdaRk5oUlhoWVRWZDRZVkl5ZUc5WmVrazFUVmRPZEZSdGVFcGhiVGx1VTFkc1NtTXdiSFZhTTFKYVZqRktiMVJHWkVkaWJIQllUbGR3YkZVd2F6SlRWVTVMWVVad1NWVnFSbHBpVmxwdlYycEtWMlJXYTNwaE1teE5VVEJ2TUZSR1pFZGhNV3hVVFZkd1dsWjZSak5YVm1SelltMUtjRk5VV2twUk1IQkRWMnRrUjJOc2JGaE5XRUpTVFd0YU1Ga3daRWRqUm05NVRrZHNUVkV3YnpCVVJtUkhZVEZzVkUxWWJHbE5ibWh6VTFkd2Rsb3diSEZTVjJ4TlVUQnZNRlJHWkVkaE1XeFVUVmRvYWxORlNYbFhiR2hMWlcxR1dFOVlWa3BoYlRsdVUxZHdSbVJWTlRWT1NHUktZVmhrY0ZwVlRYaGhSbkJJVWxoU1lWSXhXWGxaVm1SUFlrVnNjV0l5WkVwaFZXeDZVMWMxYm1SR2JGaFZiV2hOVm5wR01sZHJaRmRqTUd4eFlqSmtTbUpGTlU5VVJsWnFUbFV4TmxaclpGTlJNR3g2VTFjMWJtUkdiRmhWYldoTlZucHNObFJHYUdGaVIwNXdVMVJhU2xFd2EzcFVSM0JHWkZVeFZGTllUa3BpYldRd1YxWmtVMkZGZUZoU2JsWmhVMFZ3TWxsV1pGTmpSbkJFVTFSYVNsRXdjRzlVYTFKT1RVVXhXRkpZYkdwTmExVXhWRlZrUmsxR2NFVmhlazVLWVZoa2NGcFZUWGhoUm5CSVVsaFNXbFl5ZUhKVFYzQjJXakJzZEZSVVRscGlWWEJ3VkZkd1QyRXdlRmhTV0d4T1lXdEdNRlJyWkZKTlJURTFUVVJXV2sxclduUlVSbEpHVFZVeE5sZFlaRkJTTVdzeFYxY3hVbVZyT1ZSVFdFNUtZbTFrTUZkV1pGTmhSWGhZVW0weGFGWXhSbkJVTW14Q1lWVXhWVlpVVWs1U1JVVjRWR3RTUm1WRk5VVmFNM0JRVlhwQmVsUlljSEpOVlRWRlUxaHdVRlpGVmpSVWJGSk9aVVUxY1ZremNFNWhiWE41VTFjMGQyTkZlSFZWYlhoc1UwWkdURkV4Um5KVGEwNVlZa2N4U2xFd2NGSlhiR2hMWkVkR1dFNVVRbHBXTUZveFUxVmtNR1JzY0VoV1YyUnJZbFphTlZsV1pHRmpSMFY1VW01d2FGVXdTalphUm1SVFlVZEdSRkZ1VW1GV00yaHpWMWN4YzJJeVJsUlJiV3hhVjBaS2Ixa3phekJhTVZWNVlraE9XbFl6VW05WmJXeERZVzFKZVZOdGFFcFNNMmh2VjJwS2Nsb3hiSFJXYm5CcFRXNU9NVk5YYkVOalIwcHdVVzV3WVZaNlZuSlVNakZMWlZad1dGSnVTa1JhTW5STFVURkdjMkpIU2tsVWJYaFFZbFUxTWxsdE5WTmpSMHAxVm0xNFJGb3lkRXRSTVdSaFpHMU9jRkZxVWtwU01uZ3hVMVZvUzJGSFNuUmFSM2hNVWtaV2QxUXlaSFpUYTA1U1lUQndhazFzV2pGWGExRjRZMWROZVU5WVZrMWlXR2d5VjFaa1UyVnJkRWxUYlhoaFZqTk9NVmRxU2xkTlJYUklWMWRzYUZOR1NYZFpNR2hPVG10NE5VOVlRbUZSZWxaNFYxWmthMlZXY0ZsYVIyaHFZbFpHTVZkVVNUVmtSWGQ1VFZkNGFWWXdjSE5aTW1zMVRXeHdXVk51UW1GaWJYUXdXV3hqTldGWFJsaGxSM2hOVFROU05sZHNaRFJpVlhoelQwUlNiVlV3YkhkVVJ6VlRZa2RXU1ZWWVFrUmFNblJMVVRGR2MyTkdjSEJSYm5CaFZucFdjbFl6YkV0a1JuQlpWRzV3V2xZeVVuTlRWM2QzVDFaQ1ZGTnJTbWxpVmtwdlUxVmtSMk5zYkZoT1IyUnBWakZhTVZkc2FFdGpSMHBZVWxka2FrMXNXbkJhUm1SSFlqQnNTVkZ0YUdsaVYxSjFXVlprTkdGSFNuQlJiWFJhVjBWd2QxTlZhRTlqUjAxNlZXMTRhVlV3U25sWFZtTjRZMFY0Y0ZGc1VtaFdNMmh2V1ZSS1IyUlZiRWhpU0hCb1ZUQkZlVk5WVmtkVU1VbDNaRVZLU2xKc1NrZFdWM1JIVkVaT1JtSkdUa3BTTVVwdldUSXhjbG95U25SUFdGSnBUVEJzYmxwRlpGZGpNWEJaVVc1YWFXRlZTbkpaVm1STFlVZFJlVkp0T1VwU01uZ3hXVlpOTUdGVk9YUlVibHBwWW14S2QxbHROVmRpUlU1dVlUQndSRlZYZUhOWmEyaFBZa1U1ZEZOdWJHRldNRnA1VVRKa2NsTnJUbGhYYmxwcVlWVkpNRk5WWkhOa1ZXeEpVMjFvYVdKWFVuTlRNRkpHVFZWMFZXSXdkRVJWVjNSTFVURm9UMkpIU25SVlZHeHFZbFphTkZSSE5VTmtiVTE2VlZjNVNtSlhaM2RhUldoRFpXczVjRTlJV210U2VteDVXV3BKZUdGSFNuUlNibEphVm5wV2IxUkhNVTlrYlVwVVQxaFNXbFY2Ykc5YVJtaFRZakIzZWxOdGVHcFhSbHB6V1hwT1UxcHRVa2hQV0VwaFZucFdiVmxzWkZkbFZtdDVZVWRvYVdKc1JqSlRWMncwWVRGc1dWVnRhRkZYU0U1d1dUQmtiMlJ0U25SV1YyeFFZbXMxYzFsclpGcGtWbWcyVVZSU2JWVXphSFpYYkdSSFlURndXVk51Y0ZGWFNFNXdWVEJqTldWdFVrUlRWRnBLVVRCdmQxbHFTakJrYlVwWVVtNVdXbFo2Um05WmJURkdaRlpyZVU5WVVrcGhXR1J3VlZSSk5XUlhTblJXYlhCclVqSjRNbGx0YkVwT2EyeEVVMjVLWVZZeFdqTlVSbVJIWXpKR1dWZHRlRXBoV0dSd1ZWUkpOV1JYVWtoV2JsWnJVWHBHVGxkc1l6RmliVkpJV2pKc1VHRlZSbkJVVmxKdVlWVjRSRk5yU2xwTmF6VnpXVEJvVW1GVk9YQlJWMnhNWVZSb2VGTlhiRE5oVmxGNlUyNUNZVTF0ZURGVFYzQjJXakJzZEdGRVFtdFRSVW8yVkRKck5HUnRVa2hQV0VwcFRXcEdiMWx0TVVka1JteFlUbGRvVFdKVk5USlpiRTVLWXpCc2Mxb3pVbFppVmxvMFdrWmtWMlZ0VWtoV2JYUk5WbTFTZDFwRlpHNWhWVGx3VVZkc1dGSlVSazVWTUdoVFRVZE9SMU50ZUdwWFJscHpXWHBPVW1GVmVFUlRha1pxVFd4YU5WUkdaRWRpYkhCWVRsUkNTbUZ0T1c1VFYzTjRaRzFXZEdKSVRtbFNNRll5Vkd4Tk1HUXdiRVJoUlRGb1ZucFZlRnBWVW5wYU1VWllUbGQwYW1KVWJIZFhhMDVDVFZWNGNWSllWazVXU0U1dVZsUkJkMlJHU2paWFdHUk9VbXN4YmxWWE5WZGpSMHBJVlZoYVZWSlVSbUZVYTFKclZqQTVOVkZxVG10aFYzUnVWVlpvUTJReVNraFdiR2hoVmpCd1RWbFdhRkprYXpWVlZGUk9UV0ZyTUhsVFZVNXZWRVpPUjFWck5WVlJNMlJ1V1d0a2MyTnNjRlJSYTJoaFZqQTFlVmx1YkhKYU1WcDBWbTVzYWsxdGVESlpiV3MwVFVWNGNWRlhaRkpOYldnMVdXcEplR0pGZURaV1ZGWk5ZV3RHTVZSWWNFSk5NREZVVGtob1RtRnNWbTVXUm1NMVlWZEdXR1ZIZUVwU2F6VnZWMjB4UjJWWFJsUlBSRVpPWlcxT01WUlljRnBoVlhoRVUydFNhVTFxVlhkWGJHTXhUVVY0VjFWcVZtcFNNVlp3VkRKc1FtRldiRmxSYm1ScFVqSjRjVmRXYUZOalIwbDVUa2hhYkZGNlJYcGFSRTVxWkVad2RFOVliR2xWZWtWNFdUSXhOR0pIU25SVWJscGhVakZhY2xRemJFTmhiVVpJVW01c2FrMXNXWGRWUmxwWFZsWktjRTFFVWtwaFdHUndWbGN4VjJKV2NGbFRiWGhxWVZWck1sTlZUa3RpTWxKSlZXNWthbVZ0T1RKVVJFNVRaRzFGZVU5WVVscFdlbFp2V1d4a1IyUldiRlJPVjNCcFRXcENNbGxzWkVaa2JVNTBWbTAxYUZkRk5IZFhiR2hLWVZWNFJGTnJTbHBOYXpWeldUQm9VbVJHU2xoT1YzQnBUV3hLZDFsdE1XcGhWVGx3VVZkc1lVMHpRbmRaTUU0eldqRndTRlp0TVdsU01GbDNWMnhPU21Nd2JISlNiWEJhVFd4YU0xcEZUWGhVVm14WVRsYzFhMVl3V25WWGJFNUtUbXRzUkZOdVFtRlJla1pMVld0T05HSkhTbkJOVmxwV1pXNVNORlZHVWtKa1ZUbEVVMnBzVEZWNlZYZFhiR2h2VFVWT2JtRXdjRVJWVjNoM1YyMXNRbUZXVFhsUFYzUmhWVEJLVVZacldrSmFNV3gwVm01c2FGSXdXalpaVm1ReldqRndTR0pJU21oWFJYQjNXV3hPUm1GVmJFaGlTRlpLVTBVMWMxbHRNVkpPYkd0NVQxaFdhMUl5ZURGYVJtUldVekJPVW1Fd2NFUldNVnA2V1hwS1ZrNXNiSFZUYlhoYVZqTk9URkV4Um5KVGJIQjBUMWhzU2xOSFpHNVpWbU13V2pKT2RGSnVWbUZOYkZaMlZHeE9jazVyVG01aE1IQkVWVmQ0Tmxkc1l6RmhNVUpaVTIxNGFsVjZWak5aYWs1UFRVVjBSRk50T1d0VFJrb3pXVE53ZG1ScmQzbGlSM1JoVm5wVmQxbFdhRk5PVlhoWVdrZG9hMUl4V1hwWFZtaHlaRmRKZW1KSVdtcGlWR3d5V1d4b1RtUldhM2xQV0ZKTlRXMTRjbGRzWXpGTlIwWlpWV3BXVFUxcldqTlpWazAxVFdzeFZFOVlXbXRUUlVZeVYycEtWMlJXY0ZsVGJXaHJVakZhYlZkWE5YTmFiVTVJWVVoYWFXSldWWFpaYTJNMVlXeHNXR1ZIZUZGV01uaHlVMWRzTTFveGNFaFNha0phVmtSR2VGbDZTVFZrVlhoMFZXcEdhVmRGU2paVE1HaDZZVmRPU0dGSVdtbGlWbFp3VkRJMVQySkhTa2hYV0ZaWlpXMWtlbE5YTVU5a2JWSllUbFJDYW1KdGVHMVhWRWsxWVRGd1ZGTlVXa3BSTUd4NVZHMXdTbUZWZUVSVGJYQnBUVEZhTVZwRmFFdE9WbWQ1WWtod2FVMVViSEZaYWtwVFlrVnNjV0l5WkVwaE1uaEdVMWRzTTJGWFNuUlBWM1JLWVcwNWJsTlhjRkpoVlhoRVUyNXdZVlo2Vm5KWFJFazFUVWRPUkZOVVdrcFJNRzkzV1RJMVYySkZiSEJrTW14aFVqRlplVmxXYUU5aVJtZDZVMjVhYVZJeFZuQlVNbXhDWVZaRmVVOVlWbXBOTVZvd1YyeG9TMXBzU1hwV2JYaHFUVEZHY0Zwc1RuSmpNa1pJVm0xb1lWSXhXalZaTTI5NFRqQnNjbUZJV21wTk1VWndWREpzUW1GWFJsaFZiWGhwWW14S2QxcEZhSEprUm05NVVtcENZVmRIVW05YVZrMHhaRzFXV0U5WWJHbE5hbXd3V1ROck1XRnRTWGxOUjJ4TlVUQndjVmxxU1RGbGJWSllUVmQ0YW1KRWJIWlphazVQVFVWc2NXSXlaRXBpVjJkM1drVm9RMlZyT1hCUFNGcHJUVEpSZWxSSE1EVk9WMGw2VTI1YWFVMXFSalpVUnpGUFpHMUtWRk5ZVGtwaVZWcHhWMVJLVjJReVVrUk5XRTVhVm5wV2RWcEdaRWRpYkhCVVUxUmFTbEV3Y0hkWGEwNUtZekJzZEZKdGNGcE5iRm8yV1hwRk5VMUhTWGxrUjNocFlWVnJNbE5WVGt0V1JrcHlZWHBDVjFKV1dsUlVWbHByVmpGV2MxVnRhR2hOVlhCWFYyeGpNVmR0VWtoU2JrNXFVbGhvY0ZSVmFHcE5iRnAwVGxjNWFtRjZWa2xXYlhRMFZteGFkR1ZGVGxkU1ZsVjRWbXRrVDFac1NuTlhiVVpUWW10S1JGWlVTVEZoYkVKVVUxaE9TbUpHV2paWGJHaEtaRVpHV0ZwSGVHbGliRVp3VkRKc1FtRldVbGhQVkZwb1ZqTm9lbGRXVFRSTlZYaHhVVmRrVEZKWWFIZFpiVFZYVGtVNU5WRnJTbWxpVmtvMVdXcEtjMkV3YkVWU1dHUlFaVlZLVlZaR1RYaFJhekZWVVZST1UyRlhkRzVWVm1oRFpESktTRlpzYUdGV01IQk5XVlpvVW1Sck5WVlVWRTVOWVdzd2VWTlZUbTlVUms1SFZXczFWVkV6YUhwWlZtUXdZa1ZzUmxwSGVGcE5ibEl5VXpGT1ExSkhSa2xUYmxwcFZqRldNbFF3VWs1a1ZURkVUa1JDVGxaRlJqWlVSM0JHWkRBMWNGRnJOV2xOYTNCM1dXdGtWbG94VlhsU2JURmFWMFZ3ZDFSSWNGWmxhelUxVGtod1QyRlZiSHBUVjNSUFpHMUtkVlZ0ZUdsaWJFWXdWbXRvYzJReGNGUlRWRnBLVVRCd2Ixa3dhRU5qTWtaWVZHMW9hMUl5ZURKWmJXczFZMWROZVU5WVZrcGhXR1J3VjFaa1QyRnNjRmxSYWtKS1lXMDVibE5YYkhaa2EzUndVMWhPU21KVWJEVlpWbVJyWTBkS2NGTlVXa3BSTUhCMldrVm9VMlF5VGpaaU0xcE5UVEpSZWxwSWF6RmtiVlpZVDFoc2FVMXFiREJaTTJzeFlXMUplVTFIYkUxUk1IQTFWMnhrWVdKSFRuUldibXhLWVcwNWJsTlhNVzlOUjFKSlVXNXdVR0ZVYURKYVJFNXJUVEI0ZEU5VVZtbE5NSEF5V1dwSmVHVnJlSFJVYmxwcFZYcHNlbGxxU210alIwcHdVMWhPU21Fd1duRlhWRXBYWkRKU1JFMVZXbWxpVlRVeVYydGtjMlJXY0RWVFZGcEtVVEJ3ZFZwWE1YTmtNSGhJVlcxNFlXSllhRzlhUldSV1l6RnNkVk5YYkcxVk1uUXhXa1ZrVjA1SFVrSmlNSEJFVlZkMFMxbFdaRnBhTUd4elZHeGFVazFGTlVkV1ZFWlBVakZhVm1WRk1WaFZNRXBKVld4Vk1WSnNWbkpTYkZaVFZsWkdibFpFUmxOVlZXeEVVMWRrYUZaNlVtNVpla3BYWkZad1JXTkhjR2xOYWxWM1dWWmpNVTFXY0ZKaU1IQkVWVmQwUzFkc1pEUmxiSEJWWTBkc2FtSldXbTlaV0dSMlUydE9VbUpITVdsTk1HeHVXbFZPUTJOSFNuQlJibXhhVm5wV2RWZHNUbTVOVlhSVllqQjBSRlZYZEV0Uk1XaFBZa2RLZEZWVWJHcGlWbG8wVkVjMVEyUnRUWHBWVnpsS1lsZG5kMXBGYUVObGF6bHdUMGhhV2xkRlNqTlVSekZQWVVkR1dWTnVRbWxoVkZaM1YydE5OVTFyTVZSUFYyaHFVMFZHTWxsNlNYaGxhM2Q2VkcxNGFXSldTa1ZYVm1oRFRVWnJlV0ZIYUVwaFdHaHlWMVpvVTJGR1FsbGpNbXhvVWpCWmVWZHNWbk5rUm14WVdrZDRVazFxYkhKWGJFNUtUbXRzY1ZGWGJFMVJNSEIwV1Zaa05HSkdVblJTYmxKaFZUQnJNbE5YY0dGaVZUbElWRmh3V21GdGRETlhXSEJ1VFVVMVdGZFlaRkJXTVhCMFZGWmtTMkpXY0ZWWk0yaFBVakJXTmxSVlpFZGlSbkJJVmxSU1NtRllaSEJaTUdSdlpHMUtkRlpYYkZCaWF6VnpXV3RrV21SV2FEWlJWRkpOVVRCd2QxbHNaRWRpYkhCV1ZHNWFZVkl4Vm5CVU1teEtZVlY0UkZOcVJtcE5iRm8xVlRGamVHSkhSbFJUVkZwS1lWVnNlbE5YTlZOT1YwNUlWbGRzVUdGVmNEVlhiR1JyWTBkTmVsVnViR3hWTUc4MVZFVmtiMkpHYkZoVmJYaHFZbXN3TlZwWWJFdE5WMDE1Vm01c1RWWXdXblZYYkdNeFRVVnNjV0l5WkVwaGVrWXlXbGN4YzJNeVNraFNXRnBQVlhwU00xTlZUbTlVVjBaWVRsUkdiRkpJVG01VlZtTXhZVEpPZEU5WVFtRlJNRVY0VkVkd1JtUlZNVlZqTW1SV1RVUkNNRlV5Y0U1bFZURkdUVWRrVW1Kc1duZFphMlJTWkd4U1JrMVdjRTlTUjFKWVZETnNRMDB5VW5CaE1tUlNWMFZLTTFsclpGZFhSbkJZVTJ0NGFGZEdSakpVYkZKT1RUQjRjVlJVU2twUk1taE5WVEJhVTFSc1VrUmtNbVJwVWpKNGVWZHNUa05UUm5CWVZHNUthV1ZYZEc1V2JURlhaVmROZVdKSVdtbGhWR2QzVkVkd1Fsb3hSWGxoU0d4cFRXcEdjMVJJY0c1TmEzaHhVVmhXVDFKRmEzZFVWVTB3WlVVeFZWRlhaRlZXZW14d1dWWmtOR0pGYkVkVWJXaGhZbFZhTlZsV1RUUk5WVEUyV1ROV1RtVnNiSEJhYkU1eVpGZFNTRlpxVW10UlZ6bExVVEZHY2xOdFJsaFhWMlJLWWxob2MxZHROVk5XVjBaWVRWZDRhbVZWYkc1WlZtTXdXakpOZVZadVZtRlNTRUp4V1dwSk1VMUhSbGhPVkVaaFZWYzVTMUV4Um5KVGJIQllaVWh3WVZaSVFuQlpNakZYWVVkR00ySXdjRVJWVjNoMFdXcE9TbG95VmtSUmJrSnBZVlZLTlZkV1l6RmliSEJVV25wR1RGWkhPVXhSTVVaeVUydE9XVlJ0ZUdsaVZrVTFXVEl4VjJWRmVIVlJibHBxVFRGR2RsTlhNVzlOUjFKSlVXNXdVR0ZVYURKYVJFNXJUVEI0ZEU5WVRteFJlbFp4V1c1ck1XTkdjRVJQVjJocVVqSjBNbGRXYUZkTlIwWkVUMWRvYTFkR1NuWlhiR014VFVkR1dGUnRhR3RTTVZad1ZFVmtVMkZIVWtoU1ZHeG9ZbXMxTWxsdGF6RmhNbEpZVFZoa2FtVlhaek5UVnpGclpWWnNXRTVVUWxkVFIzZ3pWMnhPU2s1cmJFUlRibXhoVjBaS05WcFdUa3BqTUd4MFRWZDRhMUl5YURKWGEwNUtUbXRzUkZOdWNHbFhSVEZ3VkVWT1MyUXlSa2hQV0ZaaFZUQnJNbGw2U2xkak1YQndUbGRhVDJGcmJIcFRWekUwWVVkS2RGcEVSbHBXTWxKelUxZHdkbG93YkhSaVIzUktZbXBDZDFSRlRrTmlNWEJZVW0xMFlWZEZjRFpWUm1oNllWWnNXRlJ0Y0dGWFJVbDNVMWR3ZGxvd2JIQmlNMXBNWVZWc2VsTlhOVzVrUjBwMFZtcE9hbUpXV25wWlZtUk9aRWRHV0ZWWGJGQmhWVVp3Vm0xNFIxUnNTWGhXV0doWVlrWndSbHBWVmtkUk1WcFZVbTVPV21Fd2NIVldSbFpUVm0xS1JtRjZiRXBoV0dSd1dsVk5lR1F4YkZoT1YyaHBWakZhTlZkV1RYaGlWMFpZVGxjMVlWZEZjRE5aTWpGelpGZFNSRk5VV2twUk1Hc3dWRlJLU21Rd09WaFdWRUpRVmtacmVGUlVTazVsYXpSNVYyMXNUMUl4U25GVVdIQnVUVVV4Y1ZSdGRGQlNSWEJ5Vkc1d1UyRXdOVFZVV0doUFZrZHplbFJYY0dwbFJURlZWbFJTVGxKR2JEWlRWMnd6WVZkU1dWUnRlR3BoVkVadlYycEtWMlJYVWtSVFZGcEtVVEJ3VDFscVRuZGpSMHBJWlVkb1RXVnNWakZVVlU1Q1lqRlNTR0pJVm10WFIyTXpVMVZXUjJSV2NFbFRibHBvVmpGR2JsUnNUVEJsUlhoeFVsUmtTbEpyTlU5VVJsWnFUV3N4UlZGc1VrcFNWVzk0V1Zaa05HRXdkM2RsUlRWWVZrWkZlbFp0Y0hwYU1sRjZWMWhDU2xKVldqTlpNR1EwWWtaWmVWWnRiRlJOYlhkM1ZFaHdWbVZyTlRWT1NIQlBZVlZHZGxWNlFtOVdWbEpXWkROT1NsSXphSGRaVkVwV1dqRkplVlp0Y0doTmFtaDNVMVZhWVdKSFRuVlVia0pwVFdwU01sUnJUVEJrTUd4R1ZHMDVhbUpVYkRCWGJFMDBUVlU1VkU1SVpFMWhhekV6Vkc1d1JtUlZNVlZUVkVaS1VsUkdNbGRYTVhOak1YQlVVV3hTV2xZeGNHOVpNakZ5WkdzMVZWUlVUazFoYXpCNVUxZHNNMkZXYTNsUFdGWnJVakZhTVZwRlRYaE5SMVpaVVcxNFNtRnRPVzVUVnpGSFpESk9TR1ZJUWxwTmExbDNXVlpqTldSVmQzbGpTSEJwVFdwU2NGcHNUbkprVjFKSVZtcFNhMUZYT1V0Uk1VWnlVMjFHV0ZkWFpFcGlhelIzVjFab1UwMVhUalZUVjJSb1ZucFNibGw2U2xka1ZuQkZZMGR3YVUxcVZYZFpWbU14VFZad1VtSXdjRVJWVjNSTFYyeGtOR1ZzY0ZWalIyeHFZbFphYjFsWVpIWlRhMDVTWWtjeGFVMHdiRzVhVlU1RFkwZEtjRkZ1YkZwV2VsWjFWMnhPYmsxVmRGVmlNSFJFVlZkMFMxRXhhRTlpUjBwMFZWUnNhbUpXV2pSVVJ6VkRaRzFOZWxWWE9VcGlWMmQzV2tWb1EyVnJPWEJQU0ZwYVYwWlpkMWxWVFRGaE1YQllaRWhhYW1Kc1dqQlhWazB4WVcxSmVVMUlXbHBYUlVwM1ZFUk9XbVZGZDNwVGJYaGhUVzE0TmxwRlpGZGxWWGQ2VTIxNGFsZEdXbk5aZWs1U1pFZEplbFZ1WkUxWFJVcDJXV3BKTVdKRmVGaE9WRVpwVmpCd2Mxa3lhelJNTVhCMFQxaHNhVll3V1hkVlJtUjNaVzFKZVU1SGJFMVNNVXB2V2tWa1JrOVhSblZVYmxwcFlWUldjbHBHWTNoa01rNDFZVVJrU21KclNuWlpha2t4WWtaU2RWWnVVbHBpVmxvMVUxZHdkMlZzY0ZobFJ6Rk5Za1JuZVZSWGJETmhWMDVJWlVkb2ExSXhjREpaTWpCM1lWVTVjRk5xVGxwVk1HODFVekZPTkdJeGNGaFNiWFJoVjBWd05sVkdhSHBoVm10NVQxaFdhMUl4V2pGYVJVMTRUVWRXV1ZGdGVFcGhiVGx1VTFjeFIyUXlUa2hsU0VKYVRXdFpkMWxXWXpWa1ZYZDVZMGh3YVUxcVVuQlVSVTVMVFZkTmVWWnViRTFXTUZwMVYyeGpNVTFGYkhGaU1teFZWbnByTWxsV1pEUmpNV3hVVDBSR1RXRnJSbTVUTUZZMFkwZEtkVlpxVWxCbFZVcERXVzB4VTJWWFNYbGlSM1JLVWtaV01WUldUVEJsUlRrMVVXeFNWVlY2UmtsVWJYQkNaREZXTlZGclRtdFdNbmg2VjJ0Tk5WUldVbGRoZWtKUFRWWnJNMU5WYUd0TmEzUlVVV3RLYWxORlNucFhiRnByWWtac2NtUklRbXRSZW1kNFZGaHdhbVJWTVRaWFYyUk1VbGhTU2xaclZYaFVWWGhFVVc1T2FGWXpVbk5UVlZacllrWnJlV1JJV2t4Vk1FcFlWMnhvUzJWdFJsaFBXRlpOWld4R01WUlZUa05TUjBaSlUyNWFhVll4VmpKVWJGSnlaRlV4UkU1SWNFNVNSMDQwVkVkd1JtVlZOVlJSYXpWcFRXdHdkMWxyWkZaYU1WVjVVbTB4V2xkRmNIZFVTSEJXWldzMU5VNUljRTloVlc4MVV6Rk5NVTFHY0ZsaFJFSkVXakowUzFFeFJuTmpSbkJ3VVZkc1NtRlZTbmRaYld4RFpXeHdXRTVYZEZCaVZUVXlXVzAxVTJOSFNuVldiWGhFV2pKMFMxRXhSbk5pUjBwSlZHMTRVR0pWY0RWWGJHUkhZMnRPYm1Fd2NFUldNWEF5V1RKc1EwNUZiRWhpU0ZaS1UwVndiMWx0TVd0aVJYUkZWbGhDVUZveU9VdFJNVVp5VTIxTmVWWnVWbUZTUkVZMVYyeG9SbVJYVGtoUFdIQnJVVEprY0ZsVmFGTk5SMDVKVkZSYVRXVlViRzlaTUdSeVpGZE9TRkpxVm1GaVZWa3lXbGRyTVdGdFNYbE5TRnByWVd0c01sa3daRzlrYlVwMFZteGtZVmRGY0hkWGJURnpZV3hzV1ZWdVFtbE5hbFkyVTFkc05HRXhiRmxWYldoUlYwaE9jRmt3Wkc5a2JVcDBWbGRzVUdKck5YTlphMlJhWkZab05sRlVVbTFWTTJoMlYyeGtSMkV4Y0ZsVGJuQlJWMGhPY0ZVd1l6VmxiVkpFVTFSYVNsRXdjRzlaTUdSeVpGZE9TRkpxVm1GaVZWa3lXbGRyTVdGdFNYbE5SMnhOVVRCR2NGZFVTVFZrVjFKSVZtNVdhMUY2Um5wWGJHTXhZbTFTU0ZveWJGQmhWVVp3VkZaU2FtRlZlRVJSVjJ4YVZqQTFjVmRzYUVOTlJXeHhZakprU21GWE9USlRNbXhLWXpCc1JGTnVXbXBpVjNoMVdWWmpNR0ZWT1hCUlYyeG9VMFpKZDFrd2FFNU9hM2cxVDFST2EwMHlUakZaTUdSSFRsWndkRkpxV214aFZGWnhXV3BKZDJGVmVFUlRha1pxVFd4YU5WUkdaRWRpYkhCWVRsUkNTbUZ0T1c1VFYzTjRaRzFXZEdKSVRtbFNNRll5Vkd4Tk1HUXdiRVJoUlRGb1ZucFZlRnBWVW5wYU1VWllUbGQwYW1KVWJIZFhhMDVDVFZWNGNWSllWazVXU0U1dVZsUkJkMlJHU2paWFdHUk9VbXN4YmxWWE5WZGpSMHBJVlZoYVZWSlVSbUZVYTFKclZqQTVOVkZxVG10aFYzUnVWVlpvUTJReVNraFdiR2hoVmpCd1RWbFdhRkprYXpWVlZGUk9UV0ZyTUhsVFZVNXZWRVpPUjFWck5WVlJNMlJ1V1d0a2MyTnNjRlJSYTJoaFZqQTFlVmx1YkhKYU1WcDBWbTVzYWsxdGVESlpiV3MwVFVWNGNWRlhaRkpOYldnMVdXcEplR0pGZURaV1ZGWk5ZV3RHTVZSWWNFSk5NREZVVGtob1RtRnNWbTVXUm1NMVlWZEdXR1ZIZUVwU2F6VnZWMjB4UjJWWFJsUlBSRVpPWlcxT01WUlljRnBoVlhoRVVWZHNXazFxYkRGYVJXUlhaRmRTUkUxVVFteFhSVXB6VTFkd2Rsb3diSFJTYm1ScVVqTm9kMWRVU2tkTlIwWllUMWhXVFUweVpEQmFSRTVyVFRCNFdGZHVXbXBpVkVJd1drWm9TMk14Y0ZoT1YzQnBUV3hLYzFkclVucGFNV3Q1WVVkb2FtSnJOWE5hUlZGNFZteGFSbGRZVWxCUk1HeDZVMVZPUzJWV2NGaFhiWGhxWWxaYU5WTlhjSFphTUd4MFlVUkNhMU5GUlRKVVNHczFUVEpSZWxrelZtcFNNRmt4VjIweFIwNXRWbkJPVjNCcFRXcENNbGt5TVZkaWJVWlpWR3BDWVZkRmJESlZWM1JYVkRBMWMyTkZaRTlsYkVwYVZrVk9TbU13YkVSVGJXaGFUV3MxYzFrd2FGSmtSbkJZVGxkd2FVMXNTbmRaYlRGcVlWVTVjRkZYYkdGTk0wSjNXVEJPTTFveGNFaFdiVEZwVWpCWmQxZHNUak5hTVd4MVUxZHNUVkV3Um5CWFZtUlBZV3h3V1ZGcVFrMVdNMmh2V1cweGEwMVdiRmhhUjNoS1lXMDVibE5YTVhOaE1IaFdZa1ZXVFZJeWVISlVlazVHVDFVeFJFNUVWazFTTVZveFZFWmFWMVpGT0hwU1ZHeE9VWHBSTUZSRlpGZGtWVGg2VWxSc1RsRjZVWHBUVnpSM1kwVjRkVlZ0ZUd4VFJrWk1VVEZHY2xOclRsaGlSekZLVVRCd00xbFZZelZrVm5CWFYyMTRhbUpYZUhSWlZtUlBZVWRTU0dKSVdtbGhNbmh5VTFkc1EyTkhTbkJSYm5CaFZucFdjbFF5TVU5a2JVcDFWVzVDYVdKc1duTlJNbVJ5VTJ0T1VtSkhlR2xUUlRWelZESXhTMlZXY0ZoU2JrcEVXakowUzFFeFpHRmtiVTV3VVdwU1NsSXllREZUVldoTFlVZEtkRnBIZUV4U1JsWjNWREprZGxOclRsSmhNSEJxVFd4YU1WZHJVWGhsVm5CWlVsaFdhbEo2YkRaYVJVNXVZVmRHU1ZWcVFtcFRSVEF5VkVock5XSXhiRmxUYWtwaFYwVTBkMWRVU2tkamJIQlpWRmhXV2sxcWJEQlVSRTVMWWtadmVXSkljR3RTTVZvMVUxZHNOR0V4YkZsVmJXaFJWMGhPY0Zrd1pHOWtiVXAwVmxkc1VHSnJOWE5aYTJSYVpGWm9ObUZFYkUxU01taHpWMVprVTJKSFRuVlVWR3hzWlZWdmVGbDZTbGRsVlhoWVVtMDFZVlo2VlhkVFYzQjJZVlpTV0U5VVdtaFdNMmg2VjFaTk5FMVZlSEZSVjJSTVVsaG9kMWx0TlZkT1JUazFVV3RLYVdKV1NqVlpha3B6WVRCc1JWWllWazVWZWxJMFZETnNRMVpHVWxSTlZXaFBZV3RHTTFaWWJFTlJNbEpZWWtoT1lWRjZiRTVXUmxweVRVVTBlRmRVWkVwVFIxRjVVekZPUTFGdFRrbFJiazVoVm0xU2MxZFhkREJqUjFKRVQwUkdUbVZ0VGpGVVdIQmFXakIwUm1SRmJGZFNWRVpPVkVWT1EyTXlSbGhrUjNoS1VsZFNjMWRVU2pCa2EzUlVVV3hrWVZkRmNEWlpWbU0xWkZWNE5sVllWazVSTUVwRldWVm9TMlJ0U2xoV1dGcFBWa2QwTVZSVlRUQmxhekZGV1ROb1RXRnJWalZVYkU1RFZHMUplVk51UW1sU01WWnVWbFJLUjJKV2JGbFRia0pOWld4V05sUnVhekJsYXpWd1UycHNURlY2VlhkWGJHaHZUVVZPYm1Fd2NFUlZWM2gzVjIxc1FtRldjSFZXYmxaYVRURktkMWxxU1RCaFZXeElZa2hXU2xORk5YTlpiVEZTVG14cmVVOVlWbXRTTW5neFdrWmtWbE13VGxKaE1IQkVWakZhZWxsNlNsWk9iR3gxVTIxNFdsWXpUa3hSTVVaeVUyeHdkRTlZYkVwVFIyUnVXVlpqTUZveVRuUlNibFpoVFd4V2RsUnNUbkpPYTA1dVlUQndSRlZYZURaWGJHTXhZVEZDV1ZOdGVHRldNMDR4VjJwS1YwMUZkRVJUYlRsclUwWktNMWt6Y0haa2EzZDVVbTVrYUZWNlZuSlhWbU14WVVacmVXSkVRbHBWZWxaeFdXNXJNV05HY0VSUFZFWnFUV3hhTlZremF6VmxiSEJZVGxkMFdVMXFhM2RaTUUwMFRESktXRTlYYkdoV00yaHpWMFJPUTJJeVNYbE9WM2hSVlRCc2VWbDZTbGRqTVhCd1RsZGFUbEpIWkhwWlZXUlhZVVp3U0ZadWJHcGxha1V6VTFjMVYyVnNjRmxUV0ZKYVZqSlNjMWx0TlZKaFZUbHdVMnMxYVUwelFuZFphMlEwWVVWNE5sWllWazVSTUVaMlZrVmtjMlJYVWxsYWVtUktVbFZhTVZkcmFFdGtiVVpZVlZka1QxVjZValJVUjNCR1RqQnNSMVJyTlUxV1YwMTVWRlZTUTFaRmJFWlRha1pvVmpOb2NsUkVRalJVYkdSVlZWUk9WMkZ1VG01YVJFNWFZMFZzUmxKdVpHcFNNMmh6Vm1wS1YyRldUWGxpUkVKTlpXeFdObFJ1YXpCbGF6VndVVmM1VkUxSGFGWldSbFl6WXpCc1NHVklRbWhOYkZadVZXcEtWMkZ0UlhsUFNFSktVbXh3YzFreU5VOWpSMGw1VGtoYVQxRjZVak5UVlZaUFlqSk9kRTlZVW1GVmVtZDRWREZOTUdRd2VIRlVXR1JQWld0V01WUldVa3BOVld4R1RWaGFXbUpYZUhwWGJFNURWa1pzV0ZkdGFHcGlWM1F5Vkd4U1RrMHdlSEZVVkVwS1ltcENkMUV5WkhKVGEwNVNZa2hPYVUxclduSlZSbVIzWlcxSmVVNUlWbWxTZW14dlYydG9UbUl5VFhsV2JsWmhVWHBWZDFkc2FHOU5SWFJTWWpCd1JGVlhkRXRaVm1SYVdqSktTRTlYYUdGU2JrNXdWMnRrVjAxR2JGaGlTRTVLWWtSQ2JsVkdVWGRhTUd4elZHcEdXazFyTlhOWmVrNVBZbGRTV0dWSVRteFZNRW8yVjJ4ak1VMUZiRVpQVmxaV1VUQktWVlpHV2s1aFZUbDBWRzVhYVdKc1NuZFpiVFZYWWtWT2JtRXdjRVJWVjNoeldXdG9UMkpGT1hSVGJteGhWakJhZVZFeVpISlRhMDVZVjI1YWFtRlZTVEJUVldSelpGVnNTVk50YUdsaVYxSnpVekJTVm1ORk9XNWlNSEJFVlZkMFMxbDZTbGRrVm5CRlRWaHNZVmRGVmpGWk1HTTFaVzFTUkZveWJHaFRSa2wzV1RCb1RrNXJlRFZQVjJocVVqSjBNVmRxU1RWalZuQllaRWRvYWxJeWRERlhWRWsxWkVWM2VsZFVSazFOYXpSNFdYcE9VMlJ0U2xoV2JteHFaVlZzZWxOVlpGTmhSMUpJVWxSc2JHVlZjSE5aYkdSSFkwZEtSRk5VV2twUk1IQXhXWHBLZDAweVVYbGlSRTVvVjBkU2QxbDZTVEZsYlVwMFRraG9UbUV3U25WWmJHUkhZMGRLUkU1WGNHbE5ha0p3VkVWT1FtRlhTblJTYmxKaFZUQnJNbE5WVGt0aFIwVjZWbTVDYVdKWFVuZFpiVFZUWWtkT2RGTnRhR2xpVjA0MFZGZHNTbU13YkVSVGJtUm9VbnBzTVZkc1RrcE9iVTE1Vm01T1lXRlVWbTFVYlhCS1l6QnNSRk51Y0doV01sSXhWMnhrVTFwdFVsbFJiVnBhVFdwcmVGbHROVk5sVjFaVVUxUmFTbEV3Y0V0VmEwNUxUMVY0U0dGSGVGcFdNVXB6V1RJMVRrOVhWalZUYkd4TlZtczFjMWw2VGs5alIwbDVUa2hTVkZaV1JuQlVNbXhDWVZad2NXRkhiRTloYlZKd1ZGZHdXbVJHYkRaWGJXaFBVWHBCZDFSclpGSmxWWGhWWWtkMFVGSkdiREJVTUdSU1RsVXdlVkpVVWs1U1IzUXpWRlprVGs1VmJIQmtNbVJLWWtka01GWlZaRFJoUjFKSVYyNWFhbUpVUW5CVU1teENZVlpHV0U1WGRHcGlWR3gzVjJ0T1NtTXdiRVJUYkd4TlZteGFNVmxXYUVkTlZuQldZa2QwU21GdE9XNVRWM0J1VFdzeFJWZHRNVTlTTVZZMlYxZHdiazFWT1ZWWFZGSmhZbFpHY0ZSRlRrSmhWbVJFVFZWS2FsTkZTbGhYYkdoTFpXMUdXRTlZVmtwaGJUbHVVMWR3VG1SVk5WVlRXRlpPWVZWc2VsTlZUa3RYVlhoV1VtNWthbEpYZUhKVFYzQjJXakJzZEZSdVdtbFZlbFoxV1dwS2QySkhSalZPVjJocVUwVkdjRlJGVGtKaFZrWllWRzF3WVZkRlNYZFRWM0IyV2pCc2RGSnVaR3BTTTJoM1YxUktSMDFIUmxoUFdGWk5UVzVDTmxscVNUQmhWWGhFVVZkc1VsZEdXWGRaVldNMVpWZEdXV05IYUd0U01uZ3lXVzFzU2s1cmJFUlRhMDVoVmpCYU5WZHNhRXBoVlhoRVVWZHNXRkY2UmxkWmVrcFhaVlY0VjFWcVZtcFNNVlp3VkRKc1FtRldhM3BXYm5CclVucHNNRmRzYUVwaFZYaEVVVmRzVWxZd05YRlhiR2hEVFVWNFZtVkhhR2xpVjFGNFYxWmthMkpGYkhGaU1tUktZbGQ0Y2xSR1ZuTlNWV3h3WkRKa1NtSkhaREJXYkdoUFlrZE9jRTFWTVdsTmF6VnZXV3RrVm1GVk9YQlJWMnhvVmpGS2JWVXhWbEpoVlhoRVVWZHNWRko2YkRaYVJVNUtUbXRzUkZOdGFHcFNNblF4VjJwSk5XTldjRmhrUjJocVVqSjBNVmRVU1RWa1JXeHdaREprU21Fd05USlpiVEF4WWtacmVsVnVRbWxOYWxKd1ZESnNRbUZXVFhsV2JYaHFVWHBHUTFsclpITk5iSEJVVTFoT1NsRXdjRU5YVkVwUFlrZE9TVlZZVWxOV2VsWnhXV3BLVTJOSFNuUlpNbXhRWVZWR2NGZHFUbmRqUjA1RVUxaE9TbEV3Y0ZkWmVrcFhaVlY0VmxKdE5XRldlbFYzVTFkd2Rsb3diSFJQV0Vwb1UwWkpkMWt3VFRSbGEzaHhVbGhzVFdGclZuQmFiRTV5WkZkU1NGWnFVbXRSVnpsTFVURkdjbE50UmxoWFYyUktZbXMwZUZkVVNrOWlSMDE2VkZkc1NsSXllREZUVldoUFlrZEtkRlZVV2xwTmFtd3hXa1ZrYzJSWFVsaFdWWFJFVlZkMFMxRXhaRmRqTWsxNVZsUmFXbUpyY0hOWFZtUjZVekJPVW1Fd2NHRmlWR3cxVTFWb2Jsb3lSbGhPUjJScVlsVmFNVmRxU2xaaU1EVlVZWHBhUkZveWRFdFJNVVp6Wld4d1dFNVhkRkZYUlhCeldURk5NV1F5U1hwVWFrSk1VVEJ3ZGxwRmFGTmtNazQyWWpOYVRVMHhWakZaVm1SUFpVVjRkRTVYZUd0UmVteHZXVEJrY21SdFVuRlNWRUpOVFRCd2Ixa3daSEprYkd4WlZtcENhRkY2YkRaWGJHTXhZVEZGZVU5WGRHRlZNR3g2VTFWa1UyRkhVa2hTVkd4b1ltczFNbGx0YXpGaE1sSllUVmhrYW1WWFp6TlRWelZMWWtkT1ZtSkhkRXBoYlRsdVUxZHdXazFGTlRaUlZGSk5Wa1ZWZUZReFVrNU5NRGxGVWxST1VGWkZWbkJVUlU1Q1lWZE9TRkp1YkZwV2VrWTJVMWR3ZGxveVZqVlRibVJvVW5wc01WZHNUa3BPYlUxNVZtNU9ZV0ZVVm0xVWJYQktZekJzUkZOdVRscFdlbFoxV2taa1IySnNjRlJUVkZwS1VUQndjMWx0YTNoV2JGWTFVMWhPU2xFd2NEVlphazVYVFVad1ZGTlVXa3BSTUhBMldXeG9UbUZWZUVSUlYyeGhVakZaZVZVeFpGSmhWVGx3VVZkc2FGWXdNVFJaTWpWVFRUSldjVkp1Y0U1V1YyaDRWRlpWTkdReVRuQlRXRTVLVVRCd2Ixa3dhRU5qTWtaWVZHMW9hMUl5ZURKWmJXeEtUbXRzUkZOdVFscE5NRlp3V214bmQyTkZlRWhoUjNoYVZqRktjMWt5TlU1UFYxWTFVMjFvV2sxck5YTlpNR2hTWVZVNWNGRlhiRXhoVkdoNFUxZHNNMW93YkhSU2JYQmFUV3hhTTFwRlRYaGpNV3hZVGxjMWExWXdXblZYYkU1S1RtdHNSRk50ZUdsaFZFWlhWbGhzTkdKSFNuRmtTR2hSVmtWR01WUXhUalJqUm5CRlpFaG9VVlpGUmpGVU1FNDBaRWRTUldSSWFGRldSVVl4Vkc1c1NtTXdiRVJUYlhCcFRXcFZkMWRzWXpGTlJYaFpWV3BXYWxJeFZuQlVNbXhDWVZac1dWRnVaR2xTTW5oeFYxWm9VMk5IU1hsT1NGcG9ZbXMxTWxsdGJFcGpNR3hFVTI1YWFtSlhlSFZaVm1Nd1lWVTVjRkZYYkdoVFJrbDNXVEJTZG1ScmQzcGFSM2hhWVZSV2QxZFVUa1prVm10NVQxaFNTbUZZWkc1VFZ6VkxZa1p3ZEZadWJHRlhSV3h3VkRKc1FtRlhSa2xWYWtKcVVrYzVNbFJFVG10aVJteHdUbGhDV2swd1ZqRlhWRWsxWkVWNE5WTllUa3BSTUhBMlYyeGtUbVJHY0hSV2FrSmFUVzFrTUZkclpGZGxiVkpFVTFSYVNsRXdjSE5aYkdoRFRVZFdWRk5ZVGtwUk1IQTJWMnhrVG1SR2NIUldha0phVFcxa01GbHNZelZoTVhCVVUxUmFTbEV3Y0hGWmFrNUxaV3RzY0dReVpFcGlhelZ6VjFocmVHSldjRmxWYlhCb1VYcEdObGxXYUZOaVJXeHhZakprU21KVk5UVlphazVQWld0NFdWUnVRbXRTTVZad1ZFVk9RbUZXV2xsVWJYaHFZVlJHUTFkcVNsZGtWMUpFVTFSYVNsRXdjRTlaYWs1M1kwZEtTR1ZIYUUxbGJGWXhWRlZPUW1JeFVraGlTRlpyVjBkak0xTlZWa2RrVm5CSlUyNWFhRll4Um01VWJFMHdaVVY0Y1ZKVVpFcFNhelZQVkVaV2FrMXJNVVZSYkZKS1VsVnZlRmxXWkRSaE1IZDNaVVUxV0ZaR1JYcFdiWEI2V2pKUmVsZFlRa3BTVlZveldUQmtOR0pHV1hsV2JXeFVUVzEzZDFSSWNGWmxhelUxVGtod1QyRlZSblpWZWtKdlZsWlNWbVF6VGtwU00yaDNXVlJLVmxveFNYbFdiWEJvVFdwb2QxTlZXbUZpUjA1MVZHNUNhVTFxVWpKVWEwMHdaREJzUmxSdE9XcGlWR3d3VjJ4Tk5FMVZPVlJPU0dSTllXc3hNMVJ1Y0Vaa1ZURlZVMVJHU2xKVVJqSlhWekZ6WXpGd1ZGRnNVbHBXTVhCdldUSXhjbVJyTlZWVVZFNU5ZV3N3ZVZOWE5IZGpSWGgxVlcxNGJGTkdSa3hSTVVaeVUydE9XR0pITVVwUk1IQTFWMnhvVDAxWFNrbFZibkJLWVZWS2QxbHRiRU5sYkhCWVRsZDBVR0pWTlRKWmJUVlRZMGRLZFZadGVFUmFNblJMVVRGR2MySkhTa2xVYlhoUVlsVndOVmRzWkVkamEwNXVZVEJ3UkZZeGNESlpNbXhEVGtWc1NHSklWa3BUUlhCdldXMHhhMkpGZEVWV1dFSlFXakk1UzFFeFJuSlRiVTE1Vm01V1lWSkVSalZYYkdSWFkydDRkRnBIZUd0Uk1taDBVMWN4YjAxSFVrbFJibkJRWVZSb01sbFhNVWRrTWtaVVRsaFNXbGRHV25GWFZtaFBZakI0ZEdKSGRFMU5NbEp6V1d0a1IyRlZlRmxXYm5CaFYwVnNNbGRXYUVOalJYZDZWMWhvVFUwd05YTlpiVEZTWkVkTmVVMVljRTFXTURVeVYydGtWa3d5U2xoUFYyeG9Wak5vYzFWR2FEQmxiSEJZWlVjeFRXSkVaekJhYkU1aFlXMUdTRkp1Vm1saVZscDZWbXRvYzJReGNGVk5TR1JLWVZob2RsZHNaRWRoTVhCWlUyNXdVVmRJVG5CVk1HTTFaVzFTUkZOVVdrcGlXRUp2V1RCa2NtUlhTbGhTYWtaYVRXdGFObGxWVFRGalJuQkVVMWhPU21KVlduRlhWRXBYWkRKU1JGTlVXa3BpVlZveldUQmtOR05HYTNsU2FrSm9WbnBzTVZSRVNuZGxiVWw1VGtoT1NsTkdTbk5hVldoU1pHMU9TR1ZIYUdoV2VsSjZVMVZPZG1ScmRIQlRXRTVLWW0xa01GbHFUa3RqUm05NVlraFdTbUZ0T1hCWGFrazFaR3h2ZVdWSGVFcFRSVXA2VjFab2NtRlZlRVJUYWxKTlZucHNOVmR1YTNoalJuQkVVMVJhU21GclZuQlVSVTVMVGtWNFdWRnViR2xOYkVsNFYxUk9VbVJHYTNsUFYzUmhWVEJyTWxOWGVITlVNSGhXVFZWS1YxWlZOVU5XVkVKdVlWVjRSRk5xVWsxV01Gb3pXVEJOZUUxc2NGbFRibkJvVm5wc01WTlhjSFpoVlRGd1RrUkNUV0ZyYkRaVFYyd3pZVmRXUkUxWWNHbE5NVm8xVjFSS1ZtUkhSbGhWVjJ4UVlWVndiMWx0TVZObFYwbDVZa2QwU21GWVpIQlhWbVJQWVd4d1dWRnFRazFXTVZveFYxUkpOV0V5UmxoT1Z6VktZVzA1Y0ZkcVRuZGpSMDVFVTFoT1NtSnNXalpYYkdoS1pFWnNXRnBIZUdsaWJFWndWREpzUzJSdFJYbGhSRUpyVTBWR01sUllhekJsUlRGd1RraG9TbUpxUW5kVVJ6VlRZa2RXU1ZWVmRFUlZWM1JMVVRGa2MySlZiRVJUYkVaaFYwVndNRmxXWXpGTlJteFlVbTVXU2xJd2NITlpNakZ2WVVkTmVXSklUa3BoVlVwM1dXMXNRMlZzY0ZoT1YzUlFZbFUxTWxsdE5WTmpSMHAxVm0xNFJGb3lkRXRSTVVaellrZEtTVlJ0ZUZCaVZYQTFWMnhrUjJOclRtNWhNSEJFVmpGd01sa3liRU5PUld4SVlraFdTbE5GY0c5WmJURnJZa1YwUlZaWVFsQmFNamxMVVRGR2NsTnNiRlZOV0d4aFZqRmFlVlJITVd0aVIxSkVXakpzYUZOR1NYZFpNR2hPVG10NE5VOVVUbXROTWs0eFdXeGtSMDFHYkZoaFIyaHFZbGQwTVZkVVNUVmtSWGQ1VkdwR2FrMHhTakpaYkdSWFpWVjNlVkp0Y0ZwTmFtdDRXVzAxVW1Sc2EzcFRiWGhhVjBaS2MxUkliRXBqUlU1dVlUQndSRlZYZUhCVlJtUkdaRlpyZVU5WVdtaE5iWGh6V1hwR2VtRldWa1poUmtaV1RVWmFWVlpVUW5OU1ZXeHpUVVYwUkZWWGRFdFJNV2hQWWtkS2RGVlViR3BpVmxvMFZFYzFRMlJ0VFhwVlZ6bEtZbGRuZDFwRmFFTmxhemx3VDBoYWEwMHlVWHBVUnpCNFlVZFNTRkp0T1ZwWFJYQjNWRWN4VDJSdFNsUlBXR3hoVjBVMGQxUkVSbHBsUlhkNlZXMDVhVTB3Y0VWYVJtaFBUVWRKZVUxWGVHcGlhekZ3VkVWa1UyRkhVa2hTVkd4b1ltczFNbGx0YXpGaE1sSllUVmhrYW1WWFp6TlRWelZUWWpKSmVsTnRXbHBOTVZvMldrVmpOV1JHY0ZsVFYyeFFZbTVPY0ZsdE1VZGtSbkJVVTFSYVNtRlZTazFYVm1NeFltdHNSMUZ0YUZwTmFrWnZXVzFzU21Nd2JIUlViV2hxWWxaS2JWbHROVmRrUm14MFZtNXNTbUZ1UWtoWFZtUTBaV3h3VkdReWJHRldla1p2V1Zaa05GcHNiRmhWYlhScVlsWmFObGt6YkVwT2EyeDBVbTFvYWxJd1duUlhWbU14WVRKR1ZWRllhRkpTTWxJd1YxWmtjMk13ZUhSVWJscHBWVEJzZWxOWE1IaGtiR3gwWWtoT1lWWnFiSEZaYWs1WFpGZFNTVk5xVmxsTmF6VXlWMnRrVm1GVk9YQlRXRXBQWVd0c2NGUkZUa3RpYkhCWVRsZDBZVmRGY0cxWlZtUlNZVlU1Y0ZOWWFFcGhXR1J3V1d4ak5XRlhSbGhsUjNoWlRXcFZlRmxzWkV0aVIwNXdVMVJhYWsxc1ducFhiV3N4V21zeFJWb3pUa3BpVkVZMVdXNXNTazVyYkhCVFdFNUtZbXRLYjFsNlRrOU5Na2w2VTIxMFNtRnRPWEJaVkVrMVpGZFNTRTlZVGxwV2VsWjRXVlpqTVdKdFNsaFdibEpoVmpOTmVWUnVjSEpsYTJ4d1pESnNXbUpYZURWYVJXUnZXbXh3U0ZKcVFtRlZNR3N5VTFkd1JtUXdlRFpSVkVKTlpXdHNNMVJWVWtKaFYxcFpUVWhDVFZJeWFITlhWbVJUWWtkT2RWUlViR3hsVlhCS1dXcE9UMDFGYkhGaU1tUktZbTFSZWxwSWF6RmtSbXhaVlcxb2FGSXdXalZaVmsweFlXMUplVTFIYkUxUk1IQnhXV3BKTVUxR2NGaE9WRUpOVmpOb2MxbHRNV3ROUjBaRVUxUmFTbEV3YkRWVWExSldZVlY0UkZOcVVrMVdlbFp6V2tST1MySkhTa2hpUjNCTlZqSjRjbE5YY0haYU1HeHpWMjAxVDFKWFVsaFZiWGhoVjFaS1NXRkZTbE5OVm5CWVdXdGFZVkV4YjNsVWEyaFhZbGhvWVZWR1RrcGpNR3gxV2pOU2FtSldXalJhUm1SWFpXMVNTRlp0ZEUxWFIxSjNXa1ZrYm1GVk9YQlJWMnhZVWxSR1RsVXdhRk5OUjA1SFUyMTRhbGRHV25OWmVrNVNZVlY0UkZOcVJtcE5iRm8xVkVaa1IySnNjRmhPVkVKS1lXMDVibE5YYzNoa2JWWjBZa2hPYVZJd1ZqSlViRTB3WkRCc1JHRkZNV2hXZWxWNFdsVlNlbG94UmxoT1YzUnFZbFJzZDFkclRrSk9SWGh4VWxoV1RsSklUbTVXVkVGM1pFWk9jVkpZYUU1V1ZteHVWVmMxVjJOSFNraFZXRnBWVWxSR1lWUnJVbXRXTURrMVVXcE9hMkZYZEc1VlZtaERaREpLU0Zac2FHRldNSEJOV1Zab1VtUnJOVlZVVkU1TllXc3dlVk5WVG05VVJrNUhWV3MxVlZFelpHNVphMlJ6WTJ4d1ZGRnJhR0ZXTURWNVdXNXNjbG94V25SV2JteHFUVzE0TWxsdGF6Uk5SWGh4VVZka1VrMXRhRFZaYWtsNFlrVjRObHA2VGsxaGEwWXhWR3RTU2s1Rk1VUk9TR2hQVWtWV2JsWkdZelZoVjBaWVpVZDRTbEpyTlc5WGJURkhaVmRHVkU5RVJrNWxiVTR4VkZod1dtRlZlRVJUYlhCcFRXcFZkMWRzWXpGTlJYaFpWV3BXYWxJeFZuQlVNbXhDWVZac1dWRnVaR2xTTW5oeFYxWm9VMk5IU1hsT1NGcG9ZbXMxTWxsdGJFcGpNR3gwVW0xd1drMXNXak5hUlU1S1RtdHNSRk5ZUmsxbFZ6bHdWRVZPUzJWV2NGaFhiWGhxWWxaYU5WTlhjSFphTUd4MFlVUkNhMU5GU2paVU1tczBaRzFSZWxwRVRrMWlWRVp2V2tWa1IySXhiRmxUYmtKTllsVTFNbGxzVFRWaGJWSlpWR3BDYVUxcVJuTlpNbXMxWVVacmVWUnVXbXRXZWxWM1ZFUktUMlZXY0ZoU2FrSmhWWHBvY0ZSRlRrdGhSbXQ1VkcxNGFsTkdSakJYYkdNeFlXMUplVlZ1UW1saVYwNXdWREpzUW1GV2IzcGpTRUpxVVROa2JsZHJaRmRpVjBwSVVtcENZVlV3YkhwVFZ6RkhZV3hyZVZadVpHdFJla1o2VjFaak1XSnRVbGhTYlRWaFZUQnJNbE5WVGt0alJuQkVUVlZ3VTFFemFIZFhhMUl3WlVaQ1ZWRllWbEJWTTJoeldXMXJlRlpzVmpaa1NHaFJWa1ZHTVZRd1RqUmlSMHB4WkVob1VWWkZSakZVYm14S1l6QnNkRlJ1V21sTmJsSjNWMnhPU2s1cmJFaFhWMnhXVWxkb1VsWlVRbGRXUmxWM1lrVldVVmRJVW5CYWJFNUxUMVYwVkU1VVFtRlhSMmQzVVRKa2NsTnJUbEppU0VKaFlWVkdjRlpVVGxkaGJHdDVWbTV3YW1WVmJHNVpWbU13V2pKTmVWWnVWbUZTU0VKeFdXcEpNVTFIUmxoT1ZFWmhWVmM1UzFFeFJuSlRiSEJZWlVod1lWWklRbkJaTWpGWFlVZEdNMkl3Y0VSVlYzaDBXV3BPU2xveVZrUlJia0pwWVZWS05WZFdZekZpYkhCVVducEdURlpIT1V4Uk1VWnlVMnRPV1ZSdGVHbGlWa1UxV1RJeFYyVkZlSFZSYmxwcVRURkdkbE5YTVc5TlIxSkpVVzV3VUdGVWFESlhWbWhEWTBWNGRGTnFRbXBTZWxJeFYxUkpOV1JGZDNsalIzaHBZbGQzZUZremJFcGpNR3hJWTBod2FVMXFVakZYYTJoWFpFZE9TVlJYT1d4bFZYQTBXa1prVjJWWFZsUlRWRnBLVVRCd01GcEdhRk5oUjFKSVlraGFhV0ZWU2pWWGJHUnJZMGROZWxWdGVHcGlSVXAyV1dwSk1XSkZkRVJWYm1Sb1VucHNNVmRzVW5aYU1WVjZWVzVzYUZaNlZuVlRWazR6WVRKS1NGSnVWbUZOTVZwdlYycEtWazVyYkVabFIyaHBZbGRSZUZkV1pHdGlSV3hVWVRKa2JFMVlhREZUVlU1RFpWWndXRnBJUW1wTk1VcHpXVEo0UTJJeVNYbE9WM2hNVWpKNE1Wa3dhRmROUlRsd1VXcGthbEl5YURKWmJURldUbXRzUkZWdVpHaFNlbXd4VjJ4T05HTXhiRmhPVnpWclZqQmFkVmRzVW5aYU1IQklaVWRvYVdKWFVYaFhWbVJyWWtkYVZHRXlaR3hOV0dneFUxVk9RbG93YkVoU2FrWnJVakpvUzFkcldqUmtWV3hFVVZka1NsTkdTakpaVkVwWFpGWk9XRlZ0VG1saFZVWnVVMVZPUTFwc1ozcFZhbFpxVWpGYU1WZFdZM2hpUm1oSVRrZGtTbE5FUm1wWmJUUjRXVEpLY0ZOWVRrcGliSEJ2V1RJeGMyRkdiSFJsUjNocVpWVnJNbE5WYUhwaFYwNUlZVWhhYVdKV1ZuQlVNbXhLWTJzMWNWTlhiRXhOTURWeldXdGtXbVJXYURaYU0wNUtZbGhvYjFsdE1XdE5WbXhZV2tkNFNtRnRPVzVUVnpGellUQnNkVTFJVGtwaVZHd3pWMnhvUzJGSFVraGlTRnBwWVhwV2IxbHNaRlpoVlRsd1VWZHNhbUpXV25WWlZtaFBUVVp3V1ZOc1JtaFNlbXd4VjJ4T1MwOVZkRlJsUnpsaFZqQmFjbGRzYUV0bGJFSlpZekpzV2xZd05YRlhiR2hEVFVWc2NXSXlaRXBoVnpreVV6SnNTbU13YkhSVGFrSnFVbnBTTUZkV2FFTmpSMFY1Vm1wV1NtRnRPVzVUVnpGYVRUQXdlVlp0YkU1bGJFcHlWRVpTVjJGV2NIRlVXRkpQVWtWd2NWUnNUWGhoVlRVMlYyMTRUVlpGYTNwVVZsSlNUVVU1U0ZSWWJHRldSMk42VjJ0T1NtTXdiSFZYYlhocVltczFkMWxxU1RCaFZUbHdVVmRzVG1GVVVqWlViV3N3WlVWNFZWbDZSazloYkZad1ZFVk9TMkZHYTNsVWJYaHFVMFpHTUZsclpFZGtWbTk2Vm0xb1lVMXNWbkJVTW14Q1lWZEdXRlZYYkUxUk1HOHdWRVpvUzJKSFRsbFdiWGhxVFRGR01GbFdaRkpoVlRsd1VWZHNZVkpIVW5CWFZsSkRZa1pzTmxWWVVtRldNSEJ2VjJ0TmQwMUdiRmhYYlhSTlZqQmFjRlJXVWtwa1JUVnhVMjF3WVZaRk1UWlVWbEpPVFRBNVdGTnRlRXBoV0dSd1ZWUkpOV1JYVWtoV2JsWnJVWHBHVmxwV2FFTmlSV3h4WWpKa1NtSlZXak5aTUdRMFkwWnJlVkpxUW1oV2Vtd3hWRVJLZDJWdFNYbE9SMnhOVVRCd1NsbHFUazlOUld4eFlqSmtTbUpWV2pOWlZrMHhZVmRTU1ZGdVZrMWlWVFV5V1d4T1NtTXdiSEpVYmxwcFlsUldjMWRVVGxOalIwbDVUa2RzVUdGVlJuQlZla3BYWWtkT1JFMVZTbWxTTW5kNVYyeE9TbU13YkhKU2JYQmFUV3hhTTFwRlRYaFNiVXAwVkc1YVlWSXllREZYYm14S1RtdHNSRk50Tld4aVYzZ3pVMWRzTTJGV1JYbFBXRnBvVFcxNGMxTlhjSFphTUd4MFZGUktXbUpWTURCVVZWSldaVVU1UlZwNlRrOU5iRXB5VkRGU2EyRnNjRVZaTTJoaFlsVlZlVmR0Y0hKa01YQllVbFJLV2xaRlNtOVZSbEpLVFVVeFJWWlVVbHBoYldONlYyeGtTazFXY0VoU2JYQk9WakJhY1ZSV1VtcE5SVFZJVlcxNFVGWXdjRzlYVnpGU1pVVTFjVkZVVGtwaFdHUndWbXhvVDJKSFRuQk5WVXBoVFd4YU1WcEZUa3BPYTJ4RVUyNWFhRTF0WjNkYVJXaENaR3N4TlU1SWFFNWhWRkkwVTFjMGQyTkZlSFZWYlhoc1UwWkdURkV4Um5KVGEwNVlZa2N4U2xFd2NEVlhiR1JyWTBkTmVsVnRlR3BpUlVwMldXcEpNV0pGYkhCUmJrSnBZVlZLTmxkc1l6RmhNRGwwVkc1YWFXSnNTbmRaYlRWWFlrVk9ibUV3Y0VSVlYzaHpXV3RvVDJKRk9YUlRibXhoVmpCYWVWRXlaSEpUYTA1WVYyNWFhbUZWU1RCVFZXUnpaRlZzU1ZOdGFHbGlWMUp6VXpCU1ZtTkZPVzVpTUhCRVZWZDBTMWw2U2xka1ZuQkZUVmhzWVZkRlZqRlpNR00xWlcxU1JGb3liR2hUUmtsM1dUQm9UazVyZURWUFYyaHFVMFZHTUZkV2FFTmpSWGgwWkVoc1lWWXhTbmRhUldNMFpGZEdXRlZZV2xwTmJtaDNWMnhqTVUxRmQzcFhXR2hOVFdzMU1sbHNZM2hrYlVwd1QxUktZVmRGY0hkWGJUVnlaRVpyZVU5WGRHRlZlbXcyVjJ4ak1XRXdiSEJrTWpWc1pWVndjMXBITVZka1YxSkVVMVJhU21KV1NuTlhiVEZIVFZkS1NWVnRXbXRpVmxvMVdWWmtZV05HYTNsU2FrSm9WbnBzTVZOWGJETmhWMHBZVDFkc2FGWXphSE5XVldSdlpHMUtkRlpYYkZCaFZXeHpXVE5zU21Nd2JIVlViWGhwWWxaS2Mxa3liRXBPYTJ4MFkwZG9hMUl5ZURaWmVrbDRaV3RzZFUxSE5VdFZNbWcyVjJ4a05HSlZlSE5QUkZKTVZUTm9kbGRzWkVkaE1YQlpVMjV3VVZkSVRuQldSVnBEVlRCNFYxVnJjRlZXVmxwVlZtdFdSMVJzVmtSVFZGcEtZV3RWZVZSVlVrNWxWVGxGVWxoa1RtVnNWVEJVVjNCR1lWVjRSRk5yU2xwTmF6VnpXVEJvVW1SR1VraFNibFpoVFRGYWIxZHFTbFpoVlRsd1UyNUNZVkY2Umt0VmEwNUtZekJzY21WR1JsWmhWRVpFVmxkMFIxUXhTa1JUVkZwS1lUTlNOVmRzWkZOalIxSklUMGRzVFZFd2NFNVdWVnBLWkVaV1JtVkZTbGRTVm5CUlZsZHpkMkZWT1hCVGJXaHBZbFpLTlZscVNuTmhNR3h3WkRKc1YxZEZOWE5aTW10NFVXeHZlVlp1Vm10Uk1Hc3lVMWN3TldOdFJrbFZha0pxVVhwb05sUkhjRVpsUlhoeFVWZGtVMUl3V25wYVJ6RnpZMnQ0TmxOWVZrNVZlbEl6VTFWT2IxUlhSbGhPVkVac1VraE9ibFpzVW5wYU1VWllUbGQwYW1KVWJIZFhhMDVDVGxVNU5WRnFTbWhYUm5BeVUxVlNSazVWTVVWVFYyUlNZbXhhZDFsclpGSmtiRlpIVVd4T1RsVjZValJVTUZKQ1RXc3hWVkZZVms1U1JWWTBVekZPUTFGdFRrbFJhemxhVm5wR2MxUkVRakJsVm5CWVZXNUNhMUo2YURKYVIzQktaRlUxY0U1SWNFcFNWVm96V1RCV1QySXhiRmhPV0ZaaFZqTmtNbGRxU1RWa2JHOTVaVWQ0YWxJemFHOWFWazVEVlZkS1NGSnFRbUZpVkd3MVdXeGFVMDVYVGtoV1dGcGFWbnBXY2xreU1EVmpSbkJFVTFoT1NtRXdXWGhhUldSdlpHMU9kR0pFV2xwWFJrcDNXV3BKTUdGVk9YQlRiWGhzVmxjNU0xZHNXbTlSYlVaV1QxaENWR0V6VWxoVVZscEhZMFpTUmxScmRHaFNNSEJKVjFSS2MxVkhSbFpqUlhCWFYwaENTMVJXVlRGalJrNXhZVE5XWVZkSGVFeFVWbVJIVjBaV1dHSkdRbWhXUlVrd1ZrY3hkMUZ0Vm5KTldFWmhUVEpvVDFWclZsWmxiRkpZWTBWS2JHRXphRVZWTW5CSFlURk9TR1ZFVGxoaVJUVkxWRzEwYzJSR1NuVldiV3hPWVd4S2QxWkZWazlUTWtwSVZtdHNVbFl5ZUZGWlYzUldaVlpTVmxWck5XeFdWR3hHVmxaU1MxUnNXa2hWVkZaTllrUnNTbFpzWXpGWFJUUjNWMnhLYVZaVVJuZFZhMXByVFd4VmVWWnVSbFpsYTBwUFZWYzFSMVJ0VGxWaGVrWnBVa1Z3TlZsVVJUUk5iRlpKVm1wU1UxSXhXbHBXTVZKWFZVZEZlbFJYYkUxUk1IQk9WbFZhU21SR1ZYZGlSV2hWWVRCYVZsWnNXa3RTYTJ4eFlqSnNZVlpGVlhoWGEyUkxZa1pzVlZwNlNrNVNSV3QzVkZWU2MyRXhjSEZVV0d4YVZrVndjMWRyVWxkaFJURlZVMWh3WVZJd01UVlVhMUpTWVZWNFJGTnJVbWxOYWxWM1YyeGpNVTFGZUZkVmFsWnFVakZXY0ZReWJFdGhSMDVKVVc1T2FGWXdOVzlhUldSelpHMUtjRTlZUm1wTmFtd3hWRE5zUTJGdFJraFNibXhxVFd4WmQxVkdXbGRXVmtwd1RVUlNTbUZZWkhCVlZFazFaRmRTU0ZadVZtdFJla1pPVjJ4ak1XSnRVa2hhTW14UVlWVnJlbFF4VGt0UFZYUlVUbFJDWVZkSFozZFJNbVJ5VTJ0T1VtSklRbUZoVlVad1dYcE9WMk50VFhsV2JuQktZVlZLZDFsdGJFTmxiSEJZVGxkMFVHSlZOVEpaYlRWVFkwZEtkVlp0ZUVSYU1uUkxVVEZHYzJKSFNrbFViWGhRWWxWd05WZHNaRWRqYTA1dVlUQndSRll4Y0RKWk1teERUa1ZzU0dKSVZrcFRSWEJ2V1cweGEySkZkRVZTV0doUFZUSnpNbEV5WkhKVGEwNVNZa2h3WVZaNlZuSlZSbWhMWWtkT1ZFNVlaR2xOTURSM1V6Qk9TMkl5VWtsVmJtUnFaVzA1TWxSRVRsTmtiVVY1VDFoU1dsWjZWbTlaYkdSSFpGWnNWRTVYY0dsTmFrSXlXV3hrUm1Sc2JGbFdha0pvVVhwc05WZHNhRWROVm5CWlZHcENXVTB4U2pKWlZFcFhaRlpuZVUxWGVHcGlWVFYyVjFaak1VMUZlRFZUV0U1aFVqQlpkMWRXVVhoT01HeDFVVzA1YVUxcVZuTlRWM0IzWld4d1dHVkhNVTFpUkdnelZEQm5kMk15UmtoV2JXaGhVakZhTlZremIzaE9NR3h5WVVoYWFrMHhSbkJVTW14Q1lWZFNTRTlZU21sTmFrWnZXVzB4UjJSR2JGaE9WMmhOWWxVMU1sbHNUa3BqTUd4eVZHNWFhV0pVVm5OWFZFNVRZMGRKZVU1SGJGQmhWVVp3V1ZSS1YySkhUa1JOVjJocFVqSjNlVmRzVGtwak1HeHlWRzVhYVdKc1NuTlpiVFZTWkVaU1NGWnVWbUZOTVVwMlUxZHdkbG93YkhGU1ZGSktZVmhrY0ZWV1pFOWhiSEJaVVdwQ1NtRnRPVzVUVjJ4MlpHdDBjRk5ZVGtwaGVtdzFXVlprYTJOSFNuQlRWRnBLVVRCd2RscEZhRk5rTWs0MllqTmFUVTB4U2pKWlZFazFaRVpzV0U1WGFHbFdNRm94VjFaTk1XRnRTWGxOUjJ4TlVUQndXbFJHV2t0aVIwNVpWbTE0YWsweFNuTlhhMDE0VjBkR1dWVnRPVXBoYlRsdVUxZDRiMVJzVWtaaFJFSnJVMFZLVkZkc2FFZE5WbkJaVkdwQ1NtRllaSEJhUm1oUFlrZE9jRTFYYUdGTmJGb3hXa1ZPU2s1cmJFUlRhelZwVFROQ2QxbHJaRFJoUlhnMlZsaFdUbEV3Um5aV1JXUnpaRmRTV1ZwNlpFcFNWVm94VjJ0b1MyUnRSbGhWVjJSUFZYcFNORlJIY0VaT01HeEhWR3MxVFZaWFRYbFVWVkpEVmtWc1JsTnFSbWhXTTJoeVZFUkNORlJzWkZWVlZFNVhZVzVPYmxwRVRscGpSV3hHVW01a2FsSXphSE5XYWtwWFlWWk5lV0pFUWsxbGJGWTJWRzVyTUdWck5YQlJWemxVVFVkb1ZsWkdWak5qTUd4SVpVaENhRTFzVm01VmFrcFhZVzFGZVU5SVFrcFNiSEJ6V1RJMVQyTkhTWGxPU0ZwUFVYcFNNMU5WVms5aU1rNTBUMWhTWVZWNlozaFVNVTB3WkRCNGNWUllaRTlsYTFZeFZGWlNTazFWYkVaTldGcGFZbGQ0ZWxkc1RrTldSbXhZVjIxb2FtSlhkREpVYkZKT1RUQjRjVlJVU2twaFdHUndWVlJKTldSWFVraFdibFpyVVhwR1ZscFdhRU5pUld4eFlqSmtTbUpWV2pOWk1HUTBZMFpyZVZKcVFtaFdlbXd4VkVST2JtUkhVWHBhUkU1TlZqRndNbGt5TUhka1IxSlpVMjVPWVZaNlZuRlpha3BUWWtad1JXTXlaRnBOYldodldUSTFUMkpIVWtWTlZscFhVbFpzTUZRd1RrcGpNR3h6VTIxNFlXSldXalZYYkdoS1lWVTVjRkZYYkdoVFJrbDNXVEJvVGs1cmVEVlBWRUpwVFc1U01sbHNaRWRrVm14WVRWZG9hV0pWVmpGWFZFazFaRVYzZVUxWGFFMU5NSEJ6VjJwS2MyVnRVa2hXYm14S1lWaGtjRlZXWkU5aGJIQlpVV3BDVFZaV1dqRlhWRWsxWVRKR1dFNVhOVXBoYlRsdVUxY3hhMDV0UmxsUldFNUtVakZLYzFkdE1UUmhSMUpJVmxkc1RWRXdjRU5YVkVwUFlrZE9TVlZZVWxWU01Gb3hWMnBPVjJGR2IzbFdWMnhRWVZWR2NGbFdaRkprUms1V1ZWaE9ZVlo2VWpCV2JGcE9UakpPVlUxSVpFMWhiV1J3V214T2NtUlhVa2hXYWxKclVWYzVTMUV4Um5KVGJVWllWMWRrU21FelVqSlhhMlJXV2pGUmVGVnNSa3BTTUhCeldUSXhiMkZIVFhsaVNFNUtVakZLZDFsVVNuTmxWMFpZVFVkb1NtRlZTbmRaYld4RFpXeHdXRTVYZEZCaVZUVXlXVzAxVTJOSFNuVldiWGhFV2pKMFMxRXhSbk5pUjBwSlZHMTRVR0pWY0RWWGJHUkhZMnRPYm1Fd2NFUldNVmt3V1Zab1VtSXdiSE5rTTJST1pXczFhVlJXVW5wT1ZURjBUVmRLV1ZKRlJqWlVWRVo2WlVVNU5tRjZUbWxhVlhScVlYcEdNMlF3TVRaVWJVcE9Wa2hOTVZSWE1IaGFSV3hIWkROa1RtVnJOV2xVVmxKNlRsVTBlVTFXV21GU01GcDJVMVZvVDJKSFNraFdibkJhVmpKMGJsbDZTalJOVjA1d1UxaENSRm95ZEV0WGJHaHZZV3h3V1ZGcVFrcFRSWEJ6VjJ4a2VtUldjRmxoUjNCaFYwVkpkMWxXWXpWa1YwNDFUbFpPWVZZd1duSldhMlJ6WkVad1dFOVVSbXRTU0VKeldsVmtjMDFGZEVSVGJVNXBZa2hrTTFSWWNFOVphekZWWTNwV1RsWjZSbWxYUlZKQ1pXc3dlR016YUZCbGJYTjZXVzFPVUZkR2FFVlJXSEJPVFZoT05GUXpjSEpsUjBwWFRVZGtXVkpGUmpaVVZFWjZaVVU1Tm1GNlRtbFdXRkl5V1cweFYyTnRUWGxoTW1SWFVqRmFOVmRxU2tka1ZtOTVXa1JHV1ZKNlVuQlRNVVoyVTJ0T1dGWnFVbHBOYkZveldrVk9RMlZXY0ZoV2JrcE5ZbFpaTUZkVVNsZGtNbEpJWWtoYWFXSnJNVEZWVkVrMVpGZEtkRlp0Y0d0U01uZ3lXVzEwVjJWWFRuUlBXR3hRWWxaWk1GbFdhRkppTUd4elpVaFdXVkpGUmpaVVZFWjZaVVU1Tm1FemFHbFdibEpxVkZWU1RtVnNaRFpTVkdSUVZrZFNNR1I2Vm10Wk1ERkZWRmh3V0dWclZUTlVNVkpIWkVab1ZGRnRUazVTUlRFMlZqTndSazR3T1ZWYVNGSlhVako0Y2xkV1pIcGFNVVpZVlcxb1NsSllVakpaYlRGWFkyMU5lV0pIVG1saFZXeDNVVEprY2xOc2NGbGhSM0JoVjBWSmQxTlZUbTlVUm5CWllrZHNhVTFyV2pWWGExWnpaRmRTU0ZadWJHcGliRm96V2tWT05GSnNVWGRYYTFwcVltdHdNbGt5YkhKT2JIQlpZVWhDYTFFeVpIQlhSV014V1RBeFJWUlljRmhsYTFVelZERlNSMlJHWTNoa00yUk9aV3MxYVZSV1VucE9WVFI1VFRCU2MwMVlaRE5VV0hCUFdXc3hWV042Vms1V2VrWnJVMVZhTTJRd01UWlViVXBPVmtoTk1WUnFTWGhTYlZaSVlrUkNXVko2VW5CVE1VWjNXbXhuZVdKSVVtcFNlbXcxV2tWWk5WcHJkRVJUYmxwcVpWVnNkMVJITlU5T1YwMTZWVzE0YVZVeVpIQlhWRW8wWWtac1dWTlhiRXhWV0VJMldrWmtTMlZXY0Zoak1qbE1WVmhDZWxscVNtdGthM1JFWVRCMGEwMXRhSGRaYTJSV1dqRmFTVk5xUm1GV1J6bE1VVEZvVTJWWFZsVmlNSFJFVlZkNGIxVkdaSE5rVjA1SlZtcENURkV3Y0dwVVZWSk9aV3hrTmxKVVpGQldSVW93Vm5wR00yUXdNVFpVYlVwT1ZraE5NVlJxU1hwaFYyUk1VMjFPVGxKRk1UWldNM0JHVGpBNVZWRnVVbGxWTUVwcVZGVlNUbVZzWkRaU1ZHUlFWa2RTTUZaSE1EVmtSMGw2VTFka1YxSXdXalZYYWtwWFRVVnNSMlF6WkU1bGF6VnBWRlpTZWs1Vk1WaE5SRnBaVWtWR05sUlVSbnBsUlRrMllUTndhVlV3Um5CVE1VWjJVMnRPV0ZKdWNHdFdSRVp2VmpOd1FrNXJNWE5OUlhSRVZWZDRkMWR0YkVOaFJXeElZa2hXVEZFd2JIQlVSVTVLV2pCc2NHRjZXbXBUUlhCM1dXMDFVbUl3YkhOa00yUk9aV3MxYVZSV1VucE9WVEZZVFZWMFdsWjZWblZYVm1Nd1dqRk5lVTlZY0dsTmFsWjFVMVZXVTJSdFNuUlpNbVJXVFd0Wk1WZFdZekZpYTJ4d1lUQjBSRlZYZUhOWmEyUnpZbFZzUkZOWVpGQlJNR3h1V1cwd05VMUZiRWhpU0ZaS1VqQmFObHBHVW5ka01rNTBZa2hXYTFFeVpIQlhSVkpDWldzd2VHTXphRkJsYlhRMFdXeFdhMDFYU25SU2JrcGFWbnBTYmxaSE1EVmtSMGw2VTFka1YxSXhXbnBaTUdNMVpGVnNSbFZ0ZUdsaVYxSnZXVzFzUTFGdFVYbFNiazVhVm5wU2JsUlZVbTVoVlhSU1lqQndSRll4V25wWlZtUmFXakpLU0ZadVZreFNNRlozVlVWUmQyVkZNVVZqU0dScVlsZDRNVnBGVG01aFZtaEZVVmh3VGsxWVRqUlVNM0J5WlVkS1ZrNVlXbWxXZW13MVUxVmtkMkZIU25SYVIyaHBZVlZLZVZwR2FFdGhSMHAwV1RKa1lWSXdXalZaVms1Q1pVVXhSRkZ0YUdsaVYxSjVWMVpPUTJFeVNYbE9WelZLVTBVMWIxcFdaRWRrVm5BMVUxaENSRm95ZEV0WGJHUTBaV3h3VldJd2RFUlZWM1JMV1ZjeFIyTXhiRmhPUnpsTFRWaGtNMVJZY0U5WmF6RlZZM3BXVGsxcVJtbFhSVkpDWldzd2VHTXphRkJsYlhONldXMVdURmt5YzNoa00yUk9aV3MxYVZSV1VucE9WVEI1VFZkU1dWSkZSalpVVkVaNlpVVTVObUY2VG1sVk1FbzJXVEJrUjJSRmJFaFZia0pwVjBaYWVsZFdaSEppYTNSU1lqQndSRlZYZUhoWFZtUTBZVWRLY0ZveU5WbFNSVVkyVkZSR2VtVkZPVFpoTTJocFZtNVNhbFJWVWs1bGJHUTJVbFJrVUZaSFVqQlRWbG96WkRBeE5sUnRTazVXU0UweFZGWmplRnBHYUVWUldIQk9UVmhPTkZRemNISmtNa3BVVVd4V1lWWXpVbTlaYld4RFVrWmFSMU5yTVVwUk0wNXVWakpzUTAxWFNuVlZha1pvWlZWS2NGZHNhRXRpTVhCWVRsUkNhRlV5VG5kUk1tUnlVMnRPV0ZOVWJGcFdiazQwVkRKd1JtVldhRlJSVlhSRVZWZDBTMWRZYjNkaFZUVnhVMWRzVEUxcmJFeFJNVVp5VTIxS2RXSkhlR3BTTUZvd1V6QmtTbU14YkZSbFIzQk1WWHBXTUZwR1pEUmhSMFpVV2pOQ1JGb3lkRXRSTVdSTFpWWndXRkp1U2tSYU1uaHpXbFZrVDJKSFRrbFZWMlJUVjBkb2NWZHNhRU5OUjBaWVQxaFdTbEl3V2paVFZXUlhUa1U1ZEZacVVtaFhSa1oyV1hwT1UyVlZkRWhXYWxKTVZUSjBURkV4WkZkT1JtdDVWbTVrYTFFd1JuWlZla3BYVGxac2RFOVhhR3BpVmtwTFdXMDFVMkpIVG5WVGFrWnFVMFpHZWxWc1ZUVlNNVXBaVTI1c2FVMHdiSGRVTWpGWFRrZEdXVlZYT1VwaVNFNXZWMFpPUTFKdFZraGlSRUpLWVZkek9VcDVhM0FuS1NrPScpKQ=='))'))